package searchindex

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"

	"github.com/Azure/go-autorest/autorest"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/search/2019-05-01/searchindex"

// AutocompleteItem the result of Autocomplete requests.
type AutocompleteItem struct {
	// Text - READ-ONLY; The completed term.
	Text *string `json:"text,omitempty"`
	// QueryPlusText - READ-ONLY; The query along with the completed term.
	QueryPlusText *string `json:"queryPlusText,omitempty"`
}

// MarshalJSON is the custom marshaler for AutocompleteItem.
func (ai AutocompleteItem) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// AutocompleteRequest parameters for fuzzy matching, and other autocomplete query behaviors.
type AutocompleteRequest struct {
	// SearchText - The search text on which to base autocomplete results.
	SearchText *string `json:"search,omitempty"`
	// AutocompleteMode - Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms. Possible values include: 'OneTerm', 'TwoTerms', 'OneTermWithContext'
	AutocompleteMode AutocompleteMode `json:"autocompleteMode,omitempty"`
	// Filter - An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
	Filter *string `json:"filter,omitempty"`
	// UseFuzzyMatching - A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
	UseFuzzyMatching *bool `json:"fuzzy,omitempty"`
	// HighlightPostTag - A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.
	HighlightPostTag *string `json:"highlightPostTag,omitempty"`
	// HighlightPreTag - A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.
	HighlightPreTag *string `json:"highlightPreTag,omitempty"`
	// MinimumCoverage - A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.
	MinimumCoverage *float64 `json:"minimumCoverage,omitempty"`
	// SearchFields - The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
	SearchFields *string `json:"searchFields,omitempty"`
	// SuggesterName - The name of the suggester as specified in the suggesters collection that's part of the index definition.
	SuggesterName *string `json:"suggesterName,omitempty"`
	// Top - The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
	Top *int32 `json:"top,omitempty"`
}

// AutocompleteResult the result of Autocomplete query.
type AutocompleteResult struct {
	autorest.Response `json:"-"`
	// Coverage - READ-ONLY; A value indicating the percentage of the index that was considered by the autocomplete request, or null if minimumCoverage was not specified in the request.
	Coverage *float64 `json:"@search.coverage,omitempty"`
	// Results - READ-ONLY; The list of returned Autocompleted items.
	Results *[]AutocompleteItem `json:"value,omitempty"`
}

// MarshalJSON is the custom marshaler for AutocompleteResult.
func (ar AutocompleteResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// FacetResult a single bucket of a facet query result. Reports the number of documents with a field value
// falling within a particular range or having a particular value or interval.
type FacetResult struct {
	// Count - READ-ONLY; The approximate count of documents falling within the bucket described by this facet.
	Count *int64 `json:"count,omitempty"`
}

// MarshalJSON is the custom marshaler for FacetResult.
func (fr FacetResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// IndexAction represents an index action that operates on a document.
type IndexAction struct {
	// ActionType - The operation to perform on a document in an indexing batch. Possible values include: 'Upload', 'Merge', 'MergeOrUpload', 'Delete'
	ActionType IndexActionType `json:"@search.action,omitempty"`
}

// IndexBatch contains a batch of document write actions to send to the index.
type IndexBatch struct {
	// Actions - The actions in the batch.
	Actions *[]IndexAction `json:"value,omitempty"`
}

// IndexDocumentsResult response containing the status of operations for all documents in the indexing
// request.
type IndexDocumentsResult struct {
	autorest.Response `json:"-"`
	// Results - READ-ONLY; The list of status information for each document in the indexing request.
	Results *[]IndexingResult `json:"value,omitempty"`
}

// MarshalJSON is the custom marshaler for IndexDocumentsResult.
func (idr IndexDocumentsResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// IndexingResult status of an indexing operation for a single document.
type IndexingResult struct {
	// Key - READ-ONLY; The key of a document that was in the indexing request.
	Key *string `json:"key,omitempty"`
	// ErrorMessage - READ-ONLY; The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Succeeded - READ-ONLY; A value indicating whether the indexing operation succeeded for the document identified by the key.
	Succeeded *bool `json:"status,omitempty"`
	// StatusCode - READ-ONLY; The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.
	StatusCode *int32 `json:"statusCode,omitempty"`
}

// MarshalJSON is the custom marshaler for IndexingResult.
func (ir IndexingResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// Int64 ...
type Int64 struct {
	autorest.Response `json:"-"`
	Value             *int64 `json:"value,omitempty"`
}

// SearchDocumentsResult response containing search results from an index.
type SearchDocumentsResult struct {
	autorest.Response `json:"-"`
	// Count - READ-ONLY; The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip parameters, or if Azure Cognitive Search can't return all the requested documents in a single Search response.
	Count *int64 `json:"@odata.count,omitempty"`
	// Coverage - READ-ONLY; A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not specified in the request.
	Coverage *float64 `json:"@search.coverage,omitempty"`
	// Facets - READ-ONLY; The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.
	Facets map[string][]FacetResult `json:"@search.facets"`
	// NextPageParameters - READ-ONLY; Continuation JSON payload returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this JSON along with @odata.nextLink to formulate another POST Search request to get the next part of the search response.
	NextPageParameters *SearchRequest `json:"@search.nextPageParameters,omitempty"`
	// Results - READ-ONLY; The sequence of results returned by the query.
	Results *[]SearchResult `json:"value,omitempty"`
	// NextLink - READ-ONLY; Continuation URL returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search response. Make sure to use the same verb (GET or POST) as the request that produced this response.
	NextLink *string `json:"@odata.nextLink,omitempty"`
}

// MarshalJSON is the custom marshaler for SearchDocumentsResult.
func (sdr SearchDocumentsResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// SearchRequest parameters for filtering, sorting, faceting, paging, and other search query behaviors.
type SearchRequest struct {
	// IncludeTotalResultCount - A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
	IncludeTotalResultCount *bool `json:"count,omitempty"`
	// Facets - The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.
	Facets *[]string `json:"facets,omitempty"`
	// Filter - The OData $filter expression to apply to the search query.
	Filter *string `json:"filter,omitempty"`
	// HighlightFields - The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
	HighlightFields *string `json:"highlight,omitempty"`
	// HighlightPostTag - A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
	HighlightPostTag *string `json:"highlightPostTag,omitempty"`
	// HighlightPreTag - A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
	HighlightPreTag *string `json:"highlightPreTag,omitempty"`
	// MinimumCoverage - A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.
	MinimumCoverage *float64 `json:"minimumCoverage,omitempty"`
	// OrderBy - The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
	OrderBy *string `json:"orderby,omitempty"`
	// QueryType - A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax. Possible values include: 'Simple', 'Full'
	QueryType QueryType `json:"queryType,omitempty"`
	// ScoringParameters - The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be "mylocation--122.2,44.8" (without the quotes).
	ScoringParameters *[]string `json:"scoringParameters,omitempty"`
	// ScoringProfile - The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
	ScoringProfile *string `json:"scoringProfile,omitempty"`
	// SearchText - A full-text search query expression; Use "*" or omit this parameter to match all documents.
	SearchText *string `json:"search,omitempty"`
	// SearchFields - The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.
	SearchFields *string `json:"searchFields,omitempty"`
	// SearchMode - A value that specifies whether any or all of the search terms must be matched in order to count the document as a match. Possible values include: 'Any', 'All'
	SearchMode SearchMode `json:"searchMode,omitempty"`
	// Select - The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
	Select *string `json:"select,omitempty"`
	// Skip - The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead.
	Skip *int32 `json:"skip,omitempty"`
	// Top - The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.
	Top *int32 `json:"top,omitempty"`
}

// SearchResult contains a document found by a search query, plus associated metadata.
type SearchResult struct {
	// Score - READ-ONLY; The relevance score of the document compared to other documents returned by the query.
	Score *float64 `json:"@search.score,omitempty"`
	// Highlights - READ-ONLY; Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.
	Highlights map[string][]string `json:"@search.highlights"`
}

// MarshalJSON is the custom marshaler for SearchResult.
func (sr SearchResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// SetObject ...
type SetObject struct {
	autorest.Response `json:"-"`
	Value             interface{} `json:"value,omitempty"`
}

// SuggestDocumentsResult response containing suggestion query results from an index.
type SuggestDocumentsResult struct {
	autorest.Response `json:"-"`
	// Results - READ-ONLY; The sequence of results returned by the query.
	Results *[]SuggestResult `json:"value,omitempty"`
	// Coverage - READ-ONLY; A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not set in the request.
	Coverage *float64 `json:"@search.coverage,omitempty"`
}

// MarshalJSON is the custom marshaler for SuggestDocumentsResult.
func (sdr SuggestDocumentsResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// SuggestRequest parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.
type SuggestRequest struct {
	// Filter - An OData expression that filters the documents considered for suggestions.
	Filter *string `json:"filter,omitempty"`
	// UseFuzzyMatching - A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.
	UseFuzzyMatching *bool `json:"fuzzy,omitempty"`
	// HighlightPostTag - A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.
	HighlightPostTag *string `json:"highlightPostTag,omitempty"`
	// HighlightPreTag - A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.
	HighlightPreTag *string `json:"highlightPreTag,omitempty"`
	// MinimumCoverage - A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.
	MinimumCoverage *float64 `json:"minimumCoverage,omitempty"`
	// OrderBy - The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
	OrderBy *string `json:"orderby,omitempty"`
	// SearchText - The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.
	SearchText *string `json:"search,omitempty"`
	// SearchFields - The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester.
	SearchFields *string `json:"searchFields,omitempty"`
	// Select - The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results.
	Select *string `json:"select,omitempty"`
	// SuggesterName - The name of the suggester as specified in the suggesters collection that's part of the index definition.
	SuggesterName *string `json:"suggesterName,omitempty"`
	// Top - The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5.
	Top *int32 `json:"top,omitempty"`
}

// SuggestResult a result containing a document found by a suggestion query, plus associated metadata.
type SuggestResult struct {
	// Text - READ-ONLY; The text of the suggestion result.
	Text *string `json:"@search.text,omitempty"`
}

// MarshalJSON is the custom marshaler for SuggestResult.
func (sr SuggestResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}
