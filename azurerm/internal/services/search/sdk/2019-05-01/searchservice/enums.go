package searchservice

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// AnalyzerName enumerates the values for analyzer name.
type AnalyzerName string

const (
	// Arlucene ...
	Arlucene AnalyzerName = "ar.lucene"
	// Armicrosoft ...
	Armicrosoft AnalyzerName = "ar.microsoft"
	// Bglucene ...
	Bglucene AnalyzerName = "bg.lucene"
	// Bgmicrosoft ...
	Bgmicrosoft AnalyzerName = "bg.microsoft"
	// Bnmicrosoft ...
	Bnmicrosoft AnalyzerName = "bn.microsoft"
	// Calucene ...
	Calucene AnalyzerName = "ca.lucene"
	// Camicrosoft ...
	Camicrosoft AnalyzerName = "ca.microsoft"
	// Cslucene ...
	Cslucene AnalyzerName = "cs.lucene"
	// Csmicrosoft ...
	Csmicrosoft AnalyzerName = "cs.microsoft"
	// Dalucene ...
	Dalucene AnalyzerName = "da.lucene"
	// Damicrosoft ...
	Damicrosoft AnalyzerName = "da.microsoft"
	// Delucene ...
	Delucene AnalyzerName = "de.lucene"
	// Demicrosoft ...
	Demicrosoft AnalyzerName = "de.microsoft"
	// Ellucene ...
	Ellucene AnalyzerName = "el.lucene"
	// Elmicrosoft ...
	Elmicrosoft AnalyzerName = "el.microsoft"
	// Enlucene ...
	Enlucene AnalyzerName = "en.lucene"
	// Enmicrosoft ...
	Enmicrosoft AnalyzerName = "en.microsoft"
	// Eslucene ...
	Eslucene AnalyzerName = "es.lucene"
	// Esmicrosoft ...
	Esmicrosoft AnalyzerName = "es.microsoft"
	// Etmicrosoft ...
	Etmicrosoft AnalyzerName = "et.microsoft"
	// Eulucene ...
	Eulucene AnalyzerName = "eu.lucene"
	// Falucene ...
	Falucene AnalyzerName = "fa.lucene"
	// Filucene ...
	Filucene AnalyzerName = "fi.lucene"
	// Fimicrosoft ...
	Fimicrosoft AnalyzerName = "fi.microsoft"
	// Frlucene ...
	Frlucene AnalyzerName = "fr.lucene"
	// Frmicrosoft ...
	Frmicrosoft AnalyzerName = "fr.microsoft"
	// Galucene ...
	Galucene AnalyzerName = "ga.lucene"
	// Gllucene ...
	Gllucene AnalyzerName = "gl.lucene"
	// Gumicrosoft ...
	Gumicrosoft AnalyzerName = "gu.microsoft"
	// Hemicrosoft ...
	Hemicrosoft AnalyzerName = "he.microsoft"
	// Hilucene ...
	Hilucene AnalyzerName = "hi.lucene"
	// Himicrosoft ...
	Himicrosoft AnalyzerName = "hi.microsoft"
	// Hrmicrosoft ...
	Hrmicrosoft AnalyzerName = "hr.microsoft"
	// Hulucene ...
	Hulucene AnalyzerName = "hu.lucene"
	// Humicrosoft ...
	Humicrosoft AnalyzerName = "hu.microsoft"
	// Hylucene ...
	Hylucene AnalyzerName = "hy.lucene"
	// Idlucene ...
	Idlucene AnalyzerName = "id.lucene"
	// Idmicrosoft ...
	Idmicrosoft AnalyzerName = "id.microsoft"
	// Ismicrosoft ...
	Ismicrosoft AnalyzerName = "is.microsoft"
	// Itlucene ...
	Itlucene AnalyzerName = "it.lucene"
	// Itmicrosoft ...
	Itmicrosoft AnalyzerName = "it.microsoft"
	// Jalucene ...
	Jalucene AnalyzerName = "ja.lucene"
	// Jamicrosoft ...
	Jamicrosoft AnalyzerName = "ja.microsoft"
	// Keyword ...
	Keyword AnalyzerName = "keyword"
	// Knmicrosoft ...
	Knmicrosoft AnalyzerName = "kn.microsoft"
	// Kolucene ...
	Kolucene AnalyzerName = "ko.lucene"
	// Komicrosoft ...
	Komicrosoft AnalyzerName = "ko.microsoft"
	// Ltmicrosoft ...
	Ltmicrosoft AnalyzerName = "lt.microsoft"
	// Lvlucene ...
	Lvlucene AnalyzerName = "lv.lucene"
	// Lvmicrosoft ...
	Lvmicrosoft AnalyzerName = "lv.microsoft"
	// Mlmicrosoft ...
	Mlmicrosoft AnalyzerName = "ml.microsoft"
	// Mrmicrosoft ...
	Mrmicrosoft AnalyzerName = "mr.microsoft"
	// Msmicrosoft ...
	Msmicrosoft AnalyzerName = "ms.microsoft"
	// Nbmicrosoft ...
	Nbmicrosoft AnalyzerName = "nb.microsoft"
	// Nllucene ...
	Nllucene AnalyzerName = "nl.lucene"
	// Nlmicrosoft ...
	Nlmicrosoft AnalyzerName = "nl.microsoft"
	// Nolucene ...
	Nolucene AnalyzerName = "no.lucene"
	// Pamicrosoft ...
	Pamicrosoft AnalyzerName = "pa.microsoft"
	// Pattern ...
	Pattern AnalyzerName = "pattern"
	// Pllucene ...
	Pllucene AnalyzerName = "pl.lucene"
	// Plmicrosoft ...
	Plmicrosoft AnalyzerName = "pl.microsoft"
	// PtBRlucene ...
	PtBRlucene AnalyzerName = "pt-BR.lucene"
	// PtBRmicrosoft ...
	PtBRmicrosoft AnalyzerName = "pt-BR.microsoft"
	// PtPTlucene ...
	PtPTlucene AnalyzerName = "pt-PT.lucene"
	// PtPTmicrosoft ...
	PtPTmicrosoft AnalyzerName = "pt-PT.microsoft"
	// Rolucene ...
	Rolucene AnalyzerName = "ro.lucene"
	// Romicrosoft ...
	Romicrosoft AnalyzerName = "ro.microsoft"
	// Rulucene ...
	Rulucene AnalyzerName = "ru.lucene"
	// Rumicrosoft ...
	Rumicrosoft AnalyzerName = "ru.microsoft"
	// Simple ...
	Simple AnalyzerName = "simple"
	// Skmicrosoft ...
	Skmicrosoft AnalyzerName = "sk.microsoft"
	// Slmicrosoft ...
	Slmicrosoft AnalyzerName = "sl.microsoft"
	// SrCyrillicmicrosoft ...
	SrCyrillicmicrosoft AnalyzerName = "sr-cyrillic.microsoft"
	// SrLatinmicrosoft ...
	SrLatinmicrosoft AnalyzerName = "sr-latin.microsoft"
	// Standardasciifoldinglucene ...
	Standardasciifoldinglucene AnalyzerName = "standardasciifolding.lucene"
	// Standardlucene ...
	Standardlucene AnalyzerName = "standard.lucene"
	// Stop ...
	Stop AnalyzerName = "stop"
	// Svlucene ...
	Svlucene AnalyzerName = "sv.lucene"
	// Svmicrosoft ...
	Svmicrosoft AnalyzerName = "sv.microsoft"
	// Tamicrosoft ...
	Tamicrosoft AnalyzerName = "ta.microsoft"
	// Temicrosoft ...
	Temicrosoft AnalyzerName = "te.microsoft"
	// Thlucene ...
	Thlucene AnalyzerName = "th.lucene"
	// Thmicrosoft ...
	Thmicrosoft AnalyzerName = "th.microsoft"
	// Trlucene ...
	Trlucene AnalyzerName = "tr.lucene"
	// Trmicrosoft ...
	Trmicrosoft AnalyzerName = "tr.microsoft"
	// Ukmicrosoft ...
	Ukmicrosoft AnalyzerName = "uk.microsoft"
	// Urmicrosoft ...
	Urmicrosoft AnalyzerName = "ur.microsoft"
	// Vimicrosoft ...
	Vimicrosoft AnalyzerName = "vi.microsoft"
	// Whitespace ...
	Whitespace AnalyzerName = "whitespace"
	// ZhHanslucene ...
	ZhHanslucene AnalyzerName = "zh-Hans.lucene"
	// ZhHansmicrosoft ...
	ZhHansmicrosoft AnalyzerName = "zh-Hans.microsoft"
	// ZhHantlucene ...
	ZhHantlucene AnalyzerName = "zh-Hant.lucene"
	// ZhHantmicrosoft ...
	ZhHantmicrosoft AnalyzerName = "zh-Hant.microsoft"
)

// PossibleAnalyzerNameValues returns an array of possible values for the AnalyzerName const type.
func PossibleAnalyzerNameValues() []AnalyzerName {
	return []AnalyzerName{Arlucene, Armicrosoft, Bglucene, Bgmicrosoft, Bnmicrosoft, Calucene, Camicrosoft, Cslucene, Csmicrosoft, Dalucene, Damicrosoft, Delucene, Demicrosoft, Ellucene, Elmicrosoft, Enlucene, Enmicrosoft, Eslucene, Esmicrosoft, Etmicrosoft, Eulucene, Falucene, Filucene, Fimicrosoft, Frlucene, Frmicrosoft, Galucene, Gllucene, Gumicrosoft, Hemicrosoft, Hilucene, Himicrosoft, Hrmicrosoft, Hulucene, Humicrosoft, Hylucene, Idlucene, Idmicrosoft, Ismicrosoft, Itlucene, Itmicrosoft, Jalucene, Jamicrosoft, Keyword, Knmicrosoft, Kolucene, Komicrosoft, Ltmicrosoft, Lvlucene, Lvmicrosoft, Mlmicrosoft, Mrmicrosoft, Msmicrosoft, Nbmicrosoft, Nllucene, Nlmicrosoft, Nolucene, Pamicrosoft, Pattern, Pllucene, Plmicrosoft, PtBRlucene, PtBRmicrosoft, PtPTlucene, PtPTmicrosoft, Rolucene, Romicrosoft, Rulucene, Rumicrosoft, Simple, Skmicrosoft, Slmicrosoft, SrCyrillicmicrosoft, SrLatinmicrosoft, Standardasciifoldinglucene, Standardlucene, Stop, Svlucene, Svmicrosoft, Tamicrosoft, Temicrosoft, Thlucene, Thmicrosoft, Trlucene, Trmicrosoft, Ukmicrosoft, Urmicrosoft, Vimicrosoft, Whitespace, ZhHanslucene, ZhHansmicrosoft, ZhHantlucene, ZhHantmicrosoft}
}

// CharFilterName enumerates the values for char filter name.
type CharFilterName string

const (
	// HTMLStrip A character filter that attempts to strip out HTML constructs. See
	// https://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.html
	HTMLStrip CharFilterName = "html_strip"
)

// PossibleCharFilterNameValues returns an array of possible values for the CharFilterName const type.
func PossibleCharFilterNameValues() []CharFilterName {
	return []CharFilterName{HTMLStrip}
}

// CjkBigramTokenFilterScripts enumerates the values for cjk bigram token filter scripts.
type CjkBigramTokenFilterScripts string

const (
	// Han ...
	Han CjkBigramTokenFilterScripts = "han"
	// Hangul ...
	Hangul CjkBigramTokenFilterScripts = "hangul"
	// Hiragana ...
	Hiragana CjkBigramTokenFilterScripts = "hiragana"
	// Katakana ...
	Katakana CjkBigramTokenFilterScripts = "katakana"
)

// PossibleCjkBigramTokenFilterScriptsValues returns an array of possible values for the CjkBigramTokenFilterScripts const type.
func PossibleCjkBigramTokenFilterScriptsValues() []CjkBigramTokenFilterScripts {
	return []CjkBigramTokenFilterScripts{Han, Hangul, Hiragana, Katakana}
}

// DataSourceType enumerates the values for data source type.
type DataSourceType string

const (
	// AzureBlob ...
	AzureBlob DataSourceType = "azureblob"
	// AzureSQL ...
	AzureSQL DataSourceType = "azuresql"
	// AzureTable ...
	AzureTable DataSourceType = "azuretable"
	// CosmosDb ...
	CosmosDb DataSourceType = "cosmosdb"
)

// PossibleDataSourceTypeValues returns an array of possible values for the DataSourceType const type.
func PossibleDataSourceTypeValues() []DataSourceType {
	return []DataSourceType{AzureBlob, AzureSQL, AzureTable, CosmosDb}
}

// DataType enumerates the values for data type.
type DataType string

const (
	// EdmBoolean ...
	EdmBoolean DataType = "Edm.Boolean"
	// EdmComplexType ...
	EdmComplexType DataType = "Edm.ComplexType"
	// EdmDateTimeOffset ...
	EdmDateTimeOffset DataType = "Edm.DateTimeOffset"
	// EdmDouble ...
	EdmDouble DataType = "Edm.Double"
	// EdmGeographyPoint ...
	EdmGeographyPoint DataType = "Edm.GeographyPoint"
	// EdmInt32 ...
	EdmInt32 DataType = "Edm.Int32"
	// EdmInt64 ...
	EdmInt64 DataType = "Edm.Int64"
	// EdmString ...
	EdmString DataType = "Edm.String"
)

// PossibleDataTypeValues returns an array of possible values for the DataType const type.
func PossibleDataTypeValues() []DataType {
	return []DataType{EdmBoolean, EdmComplexType, EdmDateTimeOffset, EdmDouble, EdmGeographyPoint, EdmInt32, EdmInt64, EdmString}
}

// EdgeNGramTokenFilterSide enumerates the values for edge n gram token filter side.
type EdgeNGramTokenFilterSide string

const (
	// Back ...
	Back EdgeNGramTokenFilterSide = "back"
	// Front ...
	Front EdgeNGramTokenFilterSide = "front"
)

// PossibleEdgeNGramTokenFilterSideValues returns an array of possible values for the EdgeNGramTokenFilterSide const type.
func PossibleEdgeNGramTokenFilterSideValues() []EdgeNGramTokenFilterSide {
	return []EdgeNGramTokenFilterSide{Back, Front}
}

// EntityCategory enumerates the values for entity category.
type EntityCategory string

const (
	// Datetime ...
	Datetime EntityCategory = "datetime"
	// Email ...
	Email EntityCategory = "email"
	// Location ...
	Location EntityCategory = "location"
	// Organization ...
	Organization EntityCategory = "organization"
	// Person ...
	Person EntityCategory = "person"
	// Quantity ...
	Quantity EntityCategory = "quantity"
	// URL ...
	URL EntityCategory = "url"
)

// PossibleEntityCategoryValues returns an array of possible values for the EntityCategory const type.
func PossibleEntityCategoryValues() []EntityCategory {
	return []EntityCategory{Datetime, Email, Location, Organization, Person, Quantity, URL}
}

// EntityRecognitionSkillLanguage enumerates the values for entity recognition skill language.
type EntityRecognitionSkillLanguage string

const (
	// Ar Arabic
	Ar EntityRecognitionSkillLanguage = "ar"
	// Cs Czech
	Cs EntityRecognitionSkillLanguage = "cs"
	// Da Danish
	Da EntityRecognitionSkillLanguage = "da"
	// De German
	De EntityRecognitionSkillLanguage = "de"
	// El Greek
	El EntityRecognitionSkillLanguage = "el"
	// En English
	En EntityRecognitionSkillLanguage = "en"
	// Es Spanish
	Es EntityRecognitionSkillLanguage = "es"
	// Fi Finnish
	Fi EntityRecognitionSkillLanguage = "fi"
	// Fr French
	Fr EntityRecognitionSkillLanguage = "fr"
	// Hu Hungarian
	Hu EntityRecognitionSkillLanguage = "hu"
	// It Italian
	It EntityRecognitionSkillLanguage = "it"
	// Ja Japanese
	Ja EntityRecognitionSkillLanguage = "ja"
	// Ko Korean
	Ko EntityRecognitionSkillLanguage = "ko"
	// Nl Dutch
	Nl EntityRecognitionSkillLanguage = "nl"
	// No Norwegian (Bokmaal)
	No EntityRecognitionSkillLanguage = "no"
	// Pl Polish
	Pl EntityRecognitionSkillLanguage = "pl"
	// PtBR Portuguese (Brazil)
	PtBR EntityRecognitionSkillLanguage = "pt-BR"
	// PtPT Portuguese (Portugal)
	PtPT EntityRecognitionSkillLanguage = "pt-PT"
	// Ru Russian
	Ru EntityRecognitionSkillLanguage = "ru"
	// Sv Swedish
	Sv EntityRecognitionSkillLanguage = "sv"
	// Tr Turkish
	Tr EntityRecognitionSkillLanguage = "tr"
	// ZhHans Chinese-Simplified
	ZhHans EntityRecognitionSkillLanguage = "zh-Hans"
	// ZhHant Chinese-Traditional
	ZhHant EntityRecognitionSkillLanguage = "zh-Hant"
)

// PossibleEntityRecognitionSkillLanguageValues returns an array of possible values for the EntityRecognitionSkillLanguage const type.
func PossibleEntityRecognitionSkillLanguageValues() []EntityRecognitionSkillLanguage {
	return []EntityRecognitionSkillLanguage{Ar, Cs, Da, De, El, En, Es, Fi, Fr, Hu, It, Ja, Ko, Nl, No, Pl, PtBR, PtPT, Ru, Sv, Tr, ZhHans, ZhHant}
}

// ImageAnalysisSkillLanguage enumerates the values for image analysis skill language.
type ImageAnalysisSkillLanguage string

const (
	// ImageAnalysisSkillLanguageEn English
	ImageAnalysisSkillLanguageEn ImageAnalysisSkillLanguage = "en"
	// ImageAnalysisSkillLanguageEs Spanish
	ImageAnalysisSkillLanguageEs ImageAnalysisSkillLanguage = "es"
	// ImageAnalysisSkillLanguageJa Japanese
	ImageAnalysisSkillLanguageJa ImageAnalysisSkillLanguage = "ja"
	// ImageAnalysisSkillLanguagePt Portuguese
	ImageAnalysisSkillLanguagePt ImageAnalysisSkillLanguage = "pt"
	// ImageAnalysisSkillLanguageZh Chinese
	ImageAnalysisSkillLanguageZh ImageAnalysisSkillLanguage = "zh"
)

// PossibleImageAnalysisSkillLanguageValues returns an array of possible values for the ImageAnalysisSkillLanguage const type.
func PossibleImageAnalysisSkillLanguageValues() []ImageAnalysisSkillLanguage {
	return []ImageAnalysisSkillLanguage{ImageAnalysisSkillLanguageEn, ImageAnalysisSkillLanguageEs, ImageAnalysisSkillLanguageJa, ImageAnalysisSkillLanguagePt, ImageAnalysisSkillLanguageZh}
}

// ImageDetail enumerates the values for image detail.
type ImageDetail string

const (
	// Celebrities ...
	Celebrities ImageDetail = "celebrities"
	// Landmarks ...
	Landmarks ImageDetail = "landmarks"
)

// PossibleImageDetailValues returns an array of possible values for the ImageDetail const type.
func PossibleImageDetailValues() []ImageDetail {
	return []ImageDetail{Celebrities, Landmarks}
}

// IndexerExecutionStatus enumerates the values for indexer execution status.
type IndexerExecutionStatus string

const (
	// InProgress ...
	InProgress IndexerExecutionStatus = "inProgress"
	// Reset ...
	Reset IndexerExecutionStatus = "reset"
	// Success ...
	Success IndexerExecutionStatus = "success"
	// TransientFailure ...
	TransientFailure IndexerExecutionStatus = "transientFailure"
)

// PossibleIndexerExecutionStatusValues returns an array of possible values for the IndexerExecutionStatus const type.
func PossibleIndexerExecutionStatusValues() []IndexerExecutionStatus {
	return []IndexerExecutionStatus{InProgress, Reset, Success, TransientFailure}
}

// IndexerStatus enumerates the values for indexer status.
type IndexerStatus string

const (
	// Error ...
	Error IndexerStatus = "error"
	// Running ...
	Running IndexerStatus = "running"
	// Unknown ...
	Unknown IndexerStatus = "unknown"
)

// PossibleIndexerStatusValues returns an array of possible values for the IndexerStatus const type.
func PossibleIndexerStatusValues() []IndexerStatus {
	return []IndexerStatus{Error, Running, Unknown}
}

// KeyPhraseExtractionSkillLanguage enumerates the values for key phrase extraction skill language.
type KeyPhraseExtractionSkillLanguage string

const (
	// KeyPhraseExtractionSkillLanguageDa Danish
	KeyPhraseExtractionSkillLanguageDa KeyPhraseExtractionSkillLanguage = "da"
	// KeyPhraseExtractionSkillLanguageDe German
	KeyPhraseExtractionSkillLanguageDe KeyPhraseExtractionSkillLanguage = "de"
	// KeyPhraseExtractionSkillLanguageEn English
	KeyPhraseExtractionSkillLanguageEn KeyPhraseExtractionSkillLanguage = "en"
	// KeyPhraseExtractionSkillLanguageEs Spanish
	KeyPhraseExtractionSkillLanguageEs KeyPhraseExtractionSkillLanguage = "es"
	// KeyPhraseExtractionSkillLanguageFi Finnish
	KeyPhraseExtractionSkillLanguageFi KeyPhraseExtractionSkillLanguage = "fi"
	// KeyPhraseExtractionSkillLanguageFr French
	KeyPhraseExtractionSkillLanguageFr KeyPhraseExtractionSkillLanguage = "fr"
	// KeyPhraseExtractionSkillLanguageIt Italian
	KeyPhraseExtractionSkillLanguageIt KeyPhraseExtractionSkillLanguage = "it"
	// KeyPhraseExtractionSkillLanguageJa Japanese
	KeyPhraseExtractionSkillLanguageJa KeyPhraseExtractionSkillLanguage = "ja"
	// KeyPhraseExtractionSkillLanguageKo Korean
	KeyPhraseExtractionSkillLanguageKo KeyPhraseExtractionSkillLanguage = "ko"
	// KeyPhraseExtractionSkillLanguageNl Dutch
	KeyPhraseExtractionSkillLanguageNl KeyPhraseExtractionSkillLanguage = "nl"
	// KeyPhraseExtractionSkillLanguageNo Norwegian (Bokmaal)
	KeyPhraseExtractionSkillLanguageNo KeyPhraseExtractionSkillLanguage = "no"
	// KeyPhraseExtractionSkillLanguagePl Polish
	KeyPhraseExtractionSkillLanguagePl KeyPhraseExtractionSkillLanguage = "pl"
	// KeyPhraseExtractionSkillLanguagePtBR Portuguese (Brazil)
	KeyPhraseExtractionSkillLanguagePtBR KeyPhraseExtractionSkillLanguage = "pt-BR"
	// KeyPhraseExtractionSkillLanguagePtPT Portuguese (Portugal)
	KeyPhraseExtractionSkillLanguagePtPT KeyPhraseExtractionSkillLanguage = "pt-PT"
	// KeyPhraseExtractionSkillLanguageRu Russian
	KeyPhraseExtractionSkillLanguageRu KeyPhraseExtractionSkillLanguage = "ru"
	// KeyPhraseExtractionSkillLanguageSv Swedish
	KeyPhraseExtractionSkillLanguageSv KeyPhraseExtractionSkillLanguage = "sv"
)

// PossibleKeyPhraseExtractionSkillLanguageValues returns an array of possible values for the KeyPhraseExtractionSkillLanguage const type.
func PossibleKeyPhraseExtractionSkillLanguageValues() []KeyPhraseExtractionSkillLanguage {
	return []KeyPhraseExtractionSkillLanguage{KeyPhraseExtractionSkillLanguageDa, KeyPhraseExtractionSkillLanguageDe, KeyPhraseExtractionSkillLanguageEn, KeyPhraseExtractionSkillLanguageEs, KeyPhraseExtractionSkillLanguageFi, KeyPhraseExtractionSkillLanguageFr, KeyPhraseExtractionSkillLanguageIt, KeyPhraseExtractionSkillLanguageJa, KeyPhraseExtractionSkillLanguageKo, KeyPhraseExtractionSkillLanguageNl, KeyPhraseExtractionSkillLanguageNo, KeyPhraseExtractionSkillLanguagePl, KeyPhraseExtractionSkillLanguagePtBR, KeyPhraseExtractionSkillLanguagePtPT, KeyPhraseExtractionSkillLanguageRu, KeyPhraseExtractionSkillLanguageSv}
}

// MicrosoftStemmingTokenizerLanguage enumerates the values for microsoft stemming tokenizer language.
type MicrosoftStemmingTokenizerLanguage string

const (
	// Arabic ...
	Arabic MicrosoftStemmingTokenizerLanguage = "arabic"
	// Bangla ...
	Bangla MicrosoftStemmingTokenizerLanguage = "bangla"
	// Bulgarian ...
	Bulgarian MicrosoftStemmingTokenizerLanguage = "bulgarian"
	// Catalan ...
	Catalan MicrosoftStemmingTokenizerLanguage = "catalan"
	// Croatian ...
	Croatian MicrosoftStemmingTokenizerLanguage = "croatian"
	// Czech ...
	Czech MicrosoftStemmingTokenizerLanguage = "czech"
	// Danish ...
	Danish MicrosoftStemmingTokenizerLanguage = "danish"
	// Dutch ...
	Dutch MicrosoftStemmingTokenizerLanguage = "dutch"
	// English ...
	English MicrosoftStemmingTokenizerLanguage = "english"
	// Estonian ...
	Estonian MicrosoftStemmingTokenizerLanguage = "estonian"
	// Finnish ...
	Finnish MicrosoftStemmingTokenizerLanguage = "finnish"
	// French ...
	French MicrosoftStemmingTokenizerLanguage = "french"
	// German ...
	German MicrosoftStemmingTokenizerLanguage = "german"
	// Greek ...
	Greek MicrosoftStemmingTokenizerLanguage = "greek"
	// Gujarati ...
	Gujarati MicrosoftStemmingTokenizerLanguage = "gujarati"
	// Hebrew ...
	Hebrew MicrosoftStemmingTokenizerLanguage = "hebrew"
	// Hindi ...
	Hindi MicrosoftStemmingTokenizerLanguage = "hindi"
	// Hungarian ...
	Hungarian MicrosoftStemmingTokenizerLanguage = "hungarian"
	// Icelandic ...
	Icelandic MicrosoftStemmingTokenizerLanguage = "icelandic"
	// Indonesian ...
	Indonesian MicrosoftStemmingTokenizerLanguage = "indonesian"
	// Italian ...
	Italian MicrosoftStemmingTokenizerLanguage = "italian"
	// Kannada ...
	Kannada MicrosoftStemmingTokenizerLanguage = "kannada"
	// Latvian ...
	Latvian MicrosoftStemmingTokenizerLanguage = "latvian"
	// Lithuanian ...
	Lithuanian MicrosoftStemmingTokenizerLanguage = "lithuanian"
	// Malay ...
	Malay MicrosoftStemmingTokenizerLanguage = "malay"
	// Malayalam ...
	Malayalam MicrosoftStemmingTokenizerLanguage = "malayalam"
	// Marathi ...
	Marathi MicrosoftStemmingTokenizerLanguage = "marathi"
	// NorwegianBokmaal ...
	NorwegianBokmaal MicrosoftStemmingTokenizerLanguage = "norwegianBokmaal"
	// Polish ...
	Polish MicrosoftStemmingTokenizerLanguage = "polish"
	// Portuguese ...
	Portuguese MicrosoftStemmingTokenizerLanguage = "portuguese"
	// PortugueseBrazilian ...
	PortugueseBrazilian MicrosoftStemmingTokenizerLanguage = "portugueseBrazilian"
	// Punjabi ...
	Punjabi MicrosoftStemmingTokenizerLanguage = "punjabi"
	// Romanian ...
	Romanian MicrosoftStemmingTokenizerLanguage = "romanian"
	// Russian ...
	Russian MicrosoftStemmingTokenizerLanguage = "russian"
	// SerbianCyrillic ...
	SerbianCyrillic MicrosoftStemmingTokenizerLanguage = "serbianCyrillic"
	// SerbianLatin ...
	SerbianLatin MicrosoftStemmingTokenizerLanguage = "serbianLatin"
	// Slovak ...
	Slovak MicrosoftStemmingTokenizerLanguage = "slovak"
	// Slovenian ...
	Slovenian MicrosoftStemmingTokenizerLanguage = "slovenian"
	// Spanish ...
	Spanish MicrosoftStemmingTokenizerLanguage = "spanish"
	// Swedish ...
	Swedish MicrosoftStemmingTokenizerLanguage = "swedish"
	// Tamil ...
	Tamil MicrosoftStemmingTokenizerLanguage = "tamil"
	// Telugu ...
	Telugu MicrosoftStemmingTokenizerLanguage = "telugu"
	// Turkish ...
	Turkish MicrosoftStemmingTokenizerLanguage = "turkish"
	// Ukrainian ...
	Ukrainian MicrosoftStemmingTokenizerLanguage = "ukrainian"
	// Urdu ...
	Urdu MicrosoftStemmingTokenizerLanguage = "urdu"
)

// PossibleMicrosoftStemmingTokenizerLanguageValues returns an array of possible values for the MicrosoftStemmingTokenizerLanguage const type.
func PossibleMicrosoftStemmingTokenizerLanguageValues() []MicrosoftStemmingTokenizerLanguage {
	return []MicrosoftStemmingTokenizerLanguage{Arabic, Bangla, Bulgarian, Catalan, Croatian, Czech, Danish, Dutch, English, Estonian, Finnish, French, German, Greek, Gujarati, Hebrew, Hindi, Hungarian, Icelandic, Indonesian, Italian, Kannada, Latvian, Lithuanian, Malay, Malayalam, Marathi, NorwegianBokmaal, Polish, Portuguese, PortugueseBrazilian, Punjabi, Romanian, Russian, SerbianCyrillic, SerbianLatin, Slovak, Slovenian, Spanish, Swedish, Tamil, Telugu, Turkish, Ukrainian, Urdu}
}

// MicrosoftTokenizerLanguage enumerates the values for microsoft tokenizer language.
type MicrosoftTokenizerLanguage string

const (
	// MicrosoftTokenizerLanguageBangla ...
	MicrosoftTokenizerLanguageBangla MicrosoftTokenizerLanguage = "bangla"
	// MicrosoftTokenizerLanguageBulgarian ...
	MicrosoftTokenizerLanguageBulgarian MicrosoftTokenizerLanguage = "bulgarian"
	// MicrosoftTokenizerLanguageCatalan ...
	MicrosoftTokenizerLanguageCatalan MicrosoftTokenizerLanguage = "catalan"
	// MicrosoftTokenizerLanguageChineseSimplified ...
	MicrosoftTokenizerLanguageChineseSimplified MicrosoftTokenizerLanguage = "chineseSimplified"
	// MicrosoftTokenizerLanguageChineseTraditional ...
	MicrosoftTokenizerLanguageChineseTraditional MicrosoftTokenizerLanguage = "chineseTraditional"
	// MicrosoftTokenizerLanguageCroatian ...
	MicrosoftTokenizerLanguageCroatian MicrosoftTokenizerLanguage = "croatian"
	// MicrosoftTokenizerLanguageCzech ...
	MicrosoftTokenizerLanguageCzech MicrosoftTokenizerLanguage = "czech"
	// MicrosoftTokenizerLanguageDanish ...
	MicrosoftTokenizerLanguageDanish MicrosoftTokenizerLanguage = "danish"
	// MicrosoftTokenizerLanguageDutch ...
	MicrosoftTokenizerLanguageDutch MicrosoftTokenizerLanguage = "dutch"
	// MicrosoftTokenizerLanguageEnglish ...
	MicrosoftTokenizerLanguageEnglish MicrosoftTokenizerLanguage = "english"
	// MicrosoftTokenizerLanguageFrench ...
	MicrosoftTokenizerLanguageFrench MicrosoftTokenizerLanguage = "french"
	// MicrosoftTokenizerLanguageGerman ...
	MicrosoftTokenizerLanguageGerman MicrosoftTokenizerLanguage = "german"
	// MicrosoftTokenizerLanguageGreek ...
	MicrosoftTokenizerLanguageGreek MicrosoftTokenizerLanguage = "greek"
	// MicrosoftTokenizerLanguageGujarati ...
	MicrosoftTokenizerLanguageGujarati MicrosoftTokenizerLanguage = "gujarati"
	// MicrosoftTokenizerLanguageHindi ...
	MicrosoftTokenizerLanguageHindi MicrosoftTokenizerLanguage = "hindi"
	// MicrosoftTokenizerLanguageIcelandic ...
	MicrosoftTokenizerLanguageIcelandic MicrosoftTokenizerLanguage = "icelandic"
	// MicrosoftTokenizerLanguageIndonesian ...
	MicrosoftTokenizerLanguageIndonesian MicrosoftTokenizerLanguage = "indonesian"
	// MicrosoftTokenizerLanguageItalian ...
	MicrosoftTokenizerLanguageItalian MicrosoftTokenizerLanguage = "italian"
	// MicrosoftTokenizerLanguageJapanese ...
	MicrosoftTokenizerLanguageJapanese MicrosoftTokenizerLanguage = "japanese"
	// MicrosoftTokenizerLanguageKannada ...
	MicrosoftTokenizerLanguageKannada MicrosoftTokenizerLanguage = "kannada"
	// MicrosoftTokenizerLanguageKorean ...
	MicrosoftTokenizerLanguageKorean MicrosoftTokenizerLanguage = "korean"
	// MicrosoftTokenizerLanguageMalay ...
	MicrosoftTokenizerLanguageMalay MicrosoftTokenizerLanguage = "malay"
	// MicrosoftTokenizerLanguageMalayalam ...
	MicrosoftTokenizerLanguageMalayalam MicrosoftTokenizerLanguage = "malayalam"
	// MicrosoftTokenizerLanguageMarathi ...
	MicrosoftTokenizerLanguageMarathi MicrosoftTokenizerLanguage = "marathi"
	// MicrosoftTokenizerLanguageNorwegianBokmaal ...
	MicrosoftTokenizerLanguageNorwegianBokmaal MicrosoftTokenizerLanguage = "norwegianBokmaal"
	// MicrosoftTokenizerLanguagePolish ...
	MicrosoftTokenizerLanguagePolish MicrosoftTokenizerLanguage = "polish"
	// MicrosoftTokenizerLanguagePortuguese ...
	MicrosoftTokenizerLanguagePortuguese MicrosoftTokenizerLanguage = "portuguese"
	// MicrosoftTokenizerLanguagePortugueseBrazilian ...
	MicrosoftTokenizerLanguagePortugueseBrazilian MicrosoftTokenizerLanguage = "portugueseBrazilian"
	// MicrosoftTokenizerLanguagePunjabi ...
	MicrosoftTokenizerLanguagePunjabi MicrosoftTokenizerLanguage = "punjabi"
	// MicrosoftTokenizerLanguageRomanian ...
	MicrosoftTokenizerLanguageRomanian MicrosoftTokenizerLanguage = "romanian"
	// MicrosoftTokenizerLanguageRussian ...
	MicrosoftTokenizerLanguageRussian MicrosoftTokenizerLanguage = "russian"
	// MicrosoftTokenizerLanguageSerbianCyrillic ...
	MicrosoftTokenizerLanguageSerbianCyrillic MicrosoftTokenizerLanguage = "serbianCyrillic"
	// MicrosoftTokenizerLanguageSerbianLatin ...
	MicrosoftTokenizerLanguageSerbianLatin MicrosoftTokenizerLanguage = "serbianLatin"
	// MicrosoftTokenizerLanguageSlovenian ...
	MicrosoftTokenizerLanguageSlovenian MicrosoftTokenizerLanguage = "slovenian"
	// MicrosoftTokenizerLanguageSpanish ...
	MicrosoftTokenizerLanguageSpanish MicrosoftTokenizerLanguage = "spanish"
	// MicrosoftTokenizerLanguageSwedish ...
	MicrosoftTokenizerLanguageSwedish MicrosoftTokenizerLanguage = "swedish"
	// MicrosoftTokenizerLanguageTamil ...
	MicrosoftTokenizerLanguageTamil MicrosoftTokenizerLanguage = "tamil"
	// MicrosoftTokenizerLanguageTelugu ...
	MicrosoftTokenizerLanguageTelugu MicrosoftTokenizerLanguage = "telugu"
	// MicrosoftTokenizerLanguageThai ...
	MicrosoftTokenizerLanguageThai MicrosoftTokenizerLanguage = "thai"
	// MicrosoftTokenizerLanguageUkrainian ...
	MicrosoftTokenizerLanguageUkrainian MicrosoftTokenizerLanguage = "ukrainian"
	// MicrosoftTokenizerLanguageUrdu ...
	MicrosoftTokenizerLanguageUrdu MicrosoftTokenizerLanguage = "urdu"
	// MicrosoftTokenizerLanguageVietnamese ...
	MicrosoftTokenizerLanguageVietnamese MicrosoftTokenizerLanguage = "vietnamese"
)

// PossibleMicrosoftTokenizerLanguageValues returns an array of possible values for the MicrosoftTokenizerLanguage const type.
func PossibleMicrosoftTokenizerLanguageValues() []MicrosoftTokenizerLanguage {
	return []MicrosoftTokenizerLanguage{MicrosoftTokenizerLanguageBangla, MicrosoftTokenizerLanguageBulgarian, MicrosoftTokenizerLanguageCatalan, MicrosoftTokenizerLanguageChineseSimplified, MicrosoftTokenizerLanguageChineseTraditional, MicrosoftTokenizerLanguageCroatian, MicrosoftTokenizerLanguageCzech, MicrosoftTokenizerLanguageDanish, MicrosoftTokenizerLanguageDutch, MicrosoftTokenizerLanguageEnglish, MicrosoftTokenizerLanguageFrench, MicrosoftTokenizerLanguageGerman, MicrosoftTokenizerLanguageGreek, MicrosoftTokenizerLanguageGujarati, MicrosoftTokenizerLanguageHindi, MicrosoftTokenizerLanguageIcelandic, MicrosoftTokenizerLanguageIndonesian, MicrosoftTokenizerLanguageItalian, MicrosoftTokenizerLanguageJapanese, MicrosoftTokenizerLanguageKannada, MicrosoftTokenizerLanguageKorean, MicrosoftTokenizerLanguageMalay, MicrosoftTokenizerLanguageMalayalam, MicrosoftTokenizerLanguageMarathi, MicrosoftTokenizerLanguageNorwegianBokmaal, MicrosoftTokenizerLanguagePolish, MicrosoftTokenizerLanguagePortuguese, MicrosoftTokenizerLanguagePortugueseBrazilian, MicrosoftTokenizerLanguagePunjabi, MicrosoftTokenizerLanguageRomanian, MicrosoftTokenizerLanguageRussian, MicrosoftTokenizerLanguageSerbianCyrillic, MicrosoftTokenizerLanguageSerbianLatin, MicrosoftTokenizerLanguageSlovenian, MicrosoftTokenizerLanguageSpanish, MicrosoftTokenizerLanguageSwedish, MicrosoftTokenizerLanguageTamil, MicrosoftTokenizerLanguageTelugu, MicrosoftTokenizerLanguageThai, MicrosoftTokenizerLanguageUkrainian, MicrosoftTokenizerLanguageUrdu, MicrosoftTokenizerLanguageVietnamese}
}

// OcrSkillLanguage enumerates the values for ocr skill language.
type OcrSkillLanguage string

const (
	// OcrSkillLanguageAr Arabic
	OcrSkillLanguageAr OcrSkillLanguage = "ar"
	// OcrSkillLanguageCs Czech
	OcrSkillLanguageCs OcrSkillLanguage = "cs"
	// OcrSkillLanguageDa Danish
	OcrSkillLanguageDa OcrSkillLanguage = "da"
	// OcrSkillLanguageDe German
	OcrSkillLanguageDe OcrSkillLanguage = "de"
	// OcrSkillLanguageEl Greek
	OcrSkillLanguageEl OcrSkillLanguage = "el"
	// OcrSkillLanguageEn English
	OcrSkillLanguageEn OcrSkillLanguage = "en"
	// OcrSkillLanguageEs Spanish
	OcrSkillLanguageEs OcrSkillLanguage = "es"
	// OcrSkillLanguageFi Finnish
	OcrSkillLanguageFi OcrSkillLanguage = "fi"
	// OcrSkillLanguageFr French
	OcrSkillLanguageFr OcrSkillLanguage = "fr"
	// OcrSkillLanguageHu Hungarian
	OcrSkillLanguageHu OcrSkillLanguage = "hu"
	// OcrSkillLanguageIt Italian
	OcrSkillLanguageIt OcrSkillLanguage = "it"
	// OcrSkillLanguageJa Japanese
	OcrSkillLanguageJa OcrSkillLanguage = "ja"
	// OcrSkillLanguageKo Korean
	OcrSkillLanguageKo OcrSkillLanguage = "ko"
	// OcrSkillLanguageNb Norwegian (Bokmaal)
	OcrSkillLanguageNb OcrSkillLanguage = "nb"
	// OcrSkillLanguageNl Dutch
	OcrSkillLanguageNl OcrSkillLanguage = "nl"
	// OcrSkillLanguagePl Polish
	OcrSkillLanguagePl OcrSkillLanguage = "pl"
	// OcrSkillLanguagePt Portuguese
	OcrSkillLanguagePt OcrSkillLanguage = "pt"
	// OcrSkillLanguageRo Romanian
	OcrSkillLanguageRo OcrSkillLanguage = "ro"
	// OcrSkillLanguageRu Russian
	OcrSkillLanguageRu OcrSkillLanguage = "ru"
	// OcrSkillLanguageSk Slovak
	OcrSkillLanguageSk OcrSkillLanguage = "sk"
	// OcrSkillLanguageSrCyrl Serbian (Cyrillic, Serbia)
	OcrSkillLanguageSrCyrl OcrSkillLanguage = "sr-Cyrl"
	// OcrSkillLanguageSrLatn Serbian (Latin, Serbia)
	OcrSkillLanguageSrLatn OcrSkillLanguage = "sr-Latn"
	// OcrSkillLanguageSv Swedish
	OcrSkillLanguageSv OcrSkillLanguage = "sv"
	// OcrSkillLanguageTr Turkish
	OcrSkillLanguageTr OcrSkillLanguage = "tr"
	// OcrSkillLanguageZhHans Chinese-Simplified
	OcrSkillLanguageZhHans OcrSkillLanguage = "zh-Hans"
	// OcrSkillLanguageZhHant Chinese-Traditional
	OcrSkillLanguageZhHant OcrSkillLanguage = "zh-Hant"
)

// PossibleOcrSkillLanguageValues returns an array of possible values for the OcrSkillLanguage const type.
func PossibleOcrSkillLanguageValues() []OcrSkillLanguage {
	return []OcrSkillLanguage{OcrSkillLanguageAr, OcrSkillLanguageCs, OcrSkillLanguageDa, OcrSkillLanguageDe, OcrSkillLanguageEl, OcrSkillLanguageEn, OcrSkillLanguageEs, OcrSkillLanguageFi, OcrSkillLanguageFr, OcrSkillLanguageHu, OcrSkillLanguageIt, OcrSkillLanguageJa, OcrSkillLanguageKo, OcrSkillLanguageNb, OcrSkillLanguageNl, OcrSkillLanguagePl, OcrSkillLanguagePt, OcrSkillLanguageRo, OcrSkillLanguageRu, OcrSkillLanguageSk, OcrSkillLanguageSrCyrl, OcrSkillLanguageSrLatn, OcrSkillLanguageSv, OcrSkillLanguageTr, OcrSkillLanguageZhHans, OcrSkillLanguageZhHant}
}

// OdataType enumerates the values for odata type.
type OdataType string

const (
	// OdataTypeAnalyzer ...
	OdataTypeAnalyzer OdataType = "Analyzer"
	// OdataTypeMicrosoftAzureSearchCustomAnalyzer ...
	OdataTypeMicrosoftAzureSearchCustomAnalyzer OdataType = "#Microsoft.Azure.Search.CustomAnalyzer"
	// OdataTypeMicrosoftAzureSearchPatternAnalyzer ...
	OdataTypeMicrosoftAzureSearchPatternAnalyzer OdataType = "#Microsoft.Azure.Search.PatternAnalyzer"
	// OdataTypeMicrosoftAzureSearchStandardAnalyzer ...
	OdataTypeMicrosoftAzureSearchStandardAnalyzer OdataType = "#Microsoft.Azure.Search.StandardAnalyzer"
	// OdataTypeMicrosoftAzureSearchStopAnalyzer ...
	OdataTypeMicrosoftAzureSearchStopAnalyzer OdataType = "#Microsoft.Azure.Search.StopAnalyzer"
)

// PossibleOdataTypeValues returns an array of possible values for the OdataType const type.
func PossibleOdataTypeValues() []OdataType {
	return []OdataType{OdataTypeAnalyzer, OdataTypeMicrosoftAzureSearchCustomAnalyzer, OdataTypeMicrosoftAzureSearchPatternAnalyzer, OdataTypeMicrosoftAzureSearchStandardAnalyzer, OdataTypeMicrosoftAzureSearchStopAnalyzer}
}

// OdataTypeBasicCharFilter enumerates the values for odata type basic char filter.
type OdataTypeBasicCharFilter string

const (
	// OdataTypeCharFilter ...
	OdataTypeCharFilter OdataTypeBasicCharFilter = "CharFilter"
	// OdataTypeMicrosoftAzureSearchMappingCharFilter ...
	OdataTypeMicrosoftAzureSearchMappingCharFilter OdataTypeBasicCharFilter = "#Microsoft.Azure.Search.MappingCharFilter"
	// OdataTypeMicrosoftAzureSearchPatternReplaceCharFilter ...
	OdataTypeMicrosoftAzureSearchPatternReplaceCharFilter OdataTypeBasicCharFilter = "#Microsoft.Azure.Search.PatternReplaceCharFilter"
)

// PossibleOdataTypeBasicCharFilterValues returns an array of possible values for the OdataTypeBasicCharFilter const type.
func PossibleOdataTypeBasicCharFilterValues() []OdataTypeBasicCharFilter {
	return []OdataTypeBasicCharFilter{OdataTypeCharFilter, OdataTypeMicrosoftAzureSearchMappingCharFilter, OdataTypeMicrosoftAzureSearchPatternReplaceCharFilter}
}

// OdataTypeBasicCognitiveServicesAccount enumerates the values for odata type basic cognitive services
// account.
type OdataTypeBasicCognitiveServicesAccount string

const (
	// OdataTypeCognitiveServicesAccount ...
	OdataTypeCognitiveServicesAccount OdataTypeBasicCognitiveServicesAccount = "CognitiveServicesAccount"
	// OdataTypeMicrosoftAzureSearchCognitiveServicesByKey ...
	OdataTypeMicrosoftAzureSearchCognitiveServicesByKey OdataTypeBasicCognitiveServicesAccount = "#Microsoft.Azure.Search.CognitiveServicesByKey"
	// OdataTypeMicrosoftAzureSearchDefaultCognitiveServices ...
	OdataTypeMicrosoftAzureSearchDefaultCognitiveServices OdataTypeBasicCognitiveServicesAccount = "#Microsoft.Azure.Search.DefaultCognitiveServices"
)

// PossibleOdataTypeBasicCognitiveServicesAccountValues returns an array of possible values for the OdataTypeBasicCognitiveServicesAccount const type.
func PossibleOdataTypeBasicCognitiveServicesAccountValues() []OdataTypeBasicCognitiveServicesAccount {
	return []OdataTypeBasicCognitiveServicesAccount{OdataTypeCognitiveServicesAccount, OdataTypeMicrosoftAzureSearchCognitiveServicesByKey, OdataTypeMicrosoftAzureSearchDefaultCognitiveServices}
}

// OdataTypeBasicDataChangeDetectionPolicy enumerates the values for odata type basic data change detection
// policy.
type OdataTypeBasicDataChangeDetectionPolicy string

const (
	// OdataTypeDataChangeDetectionPolicy ...
	OdataTypeDataChangeDetectionPolicy OdataTypeBasicDataChangeDetectionPolicy = "DataChangeDetectionPolicy"
	// OdataTypeMicrosoftAzureSearchHighWaterMarkChangeDetectionPolicy ...
	OdataTypeMicrosoftAzureSearchHighWaterMarkChangeDetectionPolicy OdataTypeBasicDataChangeDetectionPolicy = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy"
	// OdataTypeMicrosoftAzureSearchSQLIntegratedChangeTrackingPolicy ...
	OdataTypeMicrosoftAzureSearchSQLIntegratedChangeTrackingPolicy OdataTypeBasicDataChangeDetectionPolicy = "#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy"
)

// PossibleOdataTypeBasicDataChangeDetectionPolicyValues returns an array of possible values for the OdataTypeBasicDataChangeDetectionPolicy const type.
func PossibleOdataTypeBasicDataChangeDetectionPolicyValues() []OdataTypeBasicDataChangeDetectionPolicy {
	return []OdataTypeBasicDataChangeDetectionPolicy{OdataTypeDataChangeDetectionPolicy, OdataTypeMicrosoftAzureSearchHighWaterMarkChangeDetectionPolicy, OdataTypeMicrosoftAzureSearchSQLIntegratedChangeTrackingPolicy}
}

// OdataTypeBasicDataDeletionDetectionPolicy enumerates the values for odata type basic data deletion detection
// policy.
type OdataTypeBasicDataDeletionDetectionPolicy string

const (
	// OdataTypeDataDeletionDetectionPolicy ...
	OdataTypeDataDeletionDetectionPolicy OdataTypeBasicDataDeletionDetectionPolicy = "DataDeletionDetectionPolicy"
	// OdataTypeMicrosoftAzureSearchSoftDeleteColumnDeletionDetectionPolicy ...
	OdataTypeMicrosoftAzureSearchSoftDeleteColumnDeletionDetectionPolicy OdataTypeBasicDataDeletionDetectionPolicy = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy"
)

// PossibleOdataTypeBasicDataDeletionDetectionPolicyValues returns an array of possible values for the OdataTypeBasicDataDeletionDetectionPolicy const type.
func PossibleOdataTypeBasicDataDeletionDetectionPolicyValues() []OdataTypeBasicDataDeletionDetectionPolicy {
	return []OdataTypeBasicDataDeletionDetectionPolicy{OdataTypeDataDeletionDetectionPolicy, OdataTypeMicrosoftAzureSearchSoftDeleteColumnDeletionDetectionPolicy}
}

// OdataTypeBasicSkill enumerates the values for odata type basic skill.
type OdataTypeBasicSkill string

const (
	// OdataTypeMicrosoftSkillsCustomWebAPISkill ...
	OdataTypeMicrosoftSkillsCustomWebAPISkill OdataTypeBasicSkill = "#Microsoft.Skills.Custom.WebApiSkill"
	// OdataTypeMicrosoftSkillsTextEntityRecognitionSkill ...
	OdataTypeMicrosoftSkillsTextEntityRecognitionSkill OdataTypeBasicSkill = "#Microsoft.Skills.Text.EntityRecognitionSkill"
	// OdataTypeMicrosoftSkillsTextKeyPhraseExtractionSkill ...
	OdataTypeMicrosoftSkillsTextKeyPhraseExtractionSkill OdataTypeBasicSkill = "#Microsoft.Skills.Text.KeyPhraseExtractionSkill"
	// OdataTypeMicrosoftSkillsTextLanguageDetectionSkill ...
	OdataTypeMicrosoftSkillsTextLanguageDetectionSkill OdataTypeBasicSkill = "#Microsoft.Skills.Text.LanguageDetectionSkill"
	// OdataTypeMicrosoftSkillsTextMergeSkill ...
	OdataTypeMicrosoftSkillsTextMergeSkill OdataTypeBasicSkill = "#Microsoft.Skills.Text.MergeSkill"
	// OdataTypeMicrosoftSkillsTextSentimentSkill ...
	OdataTypeMicrosoftSkillsTextSentimentSkill OdataTypeBasicSkill = "#Microsoft.Skills.Text.SentimentSkill"
	// OdataTypeMicrosoftSkillsTextSplitSkill ...
	OdataTypeMicrosoftSkillsTextSplitSkill OdataTypeBasicSkill = "#Microsoft.Skills.Text.SplitSkill"
	// OdataTypeMicrosoftSkillsTextTranslationSkill ...
	OdataTypeMicrosoftSkillsTextTranslationSkill OdataTypeBasicSkill = "#Microsoft.Skills.Text.TranslationSkill"
	// OdataTypeMicrosoftSkillsUtilConditionalSkill ...
	OdataTypeMicrosoftSkillsUtilConditionalSkill OdataTypeBasicSkill = "#Microsoft.Skills.Util.ConditionalSkill"
	// OdataTypeMicrosoftSkillsUtilShaperSkill ...
	OdataTypeMicrosoftSkillsUtilShaperSkill OdataTypeBasicSkill = "#Microsoft.Skills.Util.ShaperSkill"
	// OdataTypeMicrosoftSkillsVisionImageAnalysisSkill ...
	OdataTypeMicrosoftSkillsVisionImageAnalysisSkill OdataTypeBasicSkill = "#Microsoft.Skills.Vision.ImageAnalysisSkill"
	// OdataTypeMicrosoftSkillsVisionOcrSkill ...
	OdataTypeMicrosoftSkillsVisionOcrSkill OdataTypeBasicSkill = "#Microsoft.Skills.Vision.OcrSkill"
	// OdataTypeSkill ...
	OdataTypeSkill OdataTypeBasicSkill = "Skill"
)

// PossibleOdataTypeBasicSkillValues returns an array of possible values for the OdataTypeBasicSkill const type.
func PossibleOdataTypeBasicSkillValues() []OdataTypeBasicSkill {
	return []OdataTypeBasicSkill{OdataTypeMicrosoftSkillsCustomWebAPISkill, OdataTypeMicrosoftSkillsTextEntityRecognitionSkill, OdataTypeMicrosoftSkillsTextKeyPhraseExtractionSkill, OdataTypeMicrosoftSkillsTextLanguageDetectionSkill, OdataTypeMicrosoftSkillsTextMergeSkill, OdataTypeMicrosoftSkillsTextSentimentSkill, OdataTypeMicrosoftSkillsTextSplitSkill, OdataTypeMicrosoftSkillsTextTranslationSkill, OdataTypeMicrosoftSkillsUtilConditionalSkill, OdataTypeMicrosoftSkillsUtilShaperSkill, OdataTypeMicrosoftSkillsVisionImageAnalysisSkill, OdataTypeMicrosoftSkillsVisionOcrSkill, OdataTypeSkill}
}

// OdataTypeBasicTokenFilter enumerates the values for odata type basic token filter.
type OdataTypeBasicTokenFilter string

const (
	// OdataTypeMicrosoftAzureSearchASCIIFoldingTokenFilter ...
	OdataTypeMicrosoftAzureSearchASCIIFoldingTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.AsciiFoldingTokenFilter"
	// OdataTypeMicrosoftAzureSearchCjkBigramTokenFilter ...
	OdataTypeMicrosoftAzureSearchCjkBigramTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.CjkBigramTokenFilter"
	// OdataTypeMicrosoftAzureSearchCommonGramTokenFilter ...
	OdataTypeMicrosoftAzureSearchCommonGramTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.CommonGramTokenFilter"
	// OdataTypeMicrosoftAzureSearchDictionaryDecompounderTokenFilter ...
	OdataTypeMicrosoftAzureSearchDictionaryDecompounderTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter"
	// OdataTypeMicrosoftAzureSearchEdgeNGramTokenFilter ...
	OdataTypeMicrosoftAzureSearchEdgeNGramTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.EdgeNGramTokenFilter"
	// OdataTypeMicrosoftAzureSearchEdgeNGramTokenFilterV2 ...
	OdataTypeMicrosoftAzureSearchEdgeNGramTokenFilterV2 OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.EdgeNGramTokenFilterV2"
	// OdataTypeMicrosoftAzureSearchElisionTokenFilter ...
	OdataTypeMicrosoftAzureSearchElisionTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.ElisionTokenFilter"
	// OdataTypeMicrosoftAzureSearchKeepTokenFilter ...
	OdataTypeMicrosoftAzureSearchKeepTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.KeepTokenFilter"
	// OdataTypeMicrosoftAzureSearchKeywordMarkerTokenFilter ...
	OdataTypeMicrosoftAzureSearchKeywordMarkerTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.KeywordMarkerTokenFilter"
	// OdataTypeMicrosoftAzureSearchLengthTokenFilter ...
	OdataTypeMicrosoftAzureSearchLengthTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.LengthTokenFilter"
	// OdataTypeMicrosoftAzureSearchLimitTokenFilter ...
	OdataTypeMicrosoftAzureSearchLimitTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.LimitTokenFilter"
	// OdataTypeMicrosoftAzureSearchNGramTokenFilter ...
	OdataTypeMicrosoftAzureSearchNGramTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.NGramTokenFilter"
	// OdataTypeMicrosoftAzureSearchNGramTokenFilterV2 ...
	OdataTypeMicrosoftAzureSearchNGramTokenFilterV2 OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.NGramTokenFilterV2"
	// OdataTypeMicrosoftAzureSearchPatternCaptureTokenFilter ...
	OdataTypeMicrosoftAzureSearchPatternCaptureTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.PatternCaptureTokenFilter"
	// OdataTypeMicrosoftAzureSearchPatternReplaceTokenFilter ...
	OdataTypeMicrosoftAzureSearchPatternReplaceTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.PatternReplaceTokenFilter"
	// OdataTypeMicrosoftAzureSearchPhoneticTokenFilter ...
	OdataTypeMicrosoftAzureSearchPhoneticTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.PhoneticTokenFilter"
	// OdataTypeMicrosoftAzureSearchShingleTokenFilter ...
	OdataTypeMicrosoftAzureSearchShingleTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.ShingleTokenFilter"
	// OdataTypeMicrosoftAzureSearchSnowballTokenFilter ...
	OdataTypeMicrosoftAzureSearchSnowballTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.SnowballTokenFilter"
	// OdataTypeMicrosoftAzureSearchStemmerOverrideTokenFilter ...
	OdataTypeMicrosoftAzureSearchStemmerOverrideTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.StemmerOverrideTokenFilter"
	// OdataTypeMicrosoftAzureSearchStemmerTokenFilter ...
	OdataTypeMicrosoftAzureSearchStemmerTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.StemmerTokenFilter"
	// OdataTypeMicrosoftAzureSearchStopwordsTokenFilter ...
	OdataTypeMicrosoftAzureSearchStopwordsTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.StopwordsTokenFilter"
	// OdataTypeMicrosoftAzureSearchSynonymTokenFilter ...
	OdataTypeMicrosoftAzureSearchSynonymTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.SynonymTokenFilter"
	// OdataTypeMicrosoftAzureSearchTruncateTokenFilter ...
	OdataTypeMicrosoftAzureSearchTruncateTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.TruncateTokenFilter"
	// OdataTypeMicrosoftAzureSearchUniqueTokenFilter ...
	OdataTypeMicrosoftAzureSearchUniqueTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.UniqueTokenFilter"
	// OdataTypeMicrosoftAzureSearchWordDelimiterTokenFilter ...
	OdataTypeMicrosoftAzureSearchWordDelimiterTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.WordDelimiterTokenFilter"
	// OdataTypeTokenFilter ...
	OdataTypeTokenFilter OdataTypeBasicTokenFilter = "TokenFilter"
)

// PossibleOdataTypeBasicTokenFilterValues returns an array of possible values for the OdataTypeBasicTokenFilter const type.
func PossibleOdataTypeBasicTokenFilterValues() []OdataTypeBasicTokenFilter {
	return []OdataTypeBasicTokenFilter{OdataTypeMicrosoftAzureSearchASCIIFoldingTokenFilter, OdataTypeMicrosoftAzureSearchCjkBigramTokenFilter, OdataTypeMicrosoftAzureSearchCommonGramTokenFilter, OdataTypeMicrosoftAzureSearchDictionaryDecompounderTokenFilter, OdataTypeMicrosoftAzureSearchEdgeNGramTokenFilter, OdataTypeMicrosoftAzureSearchEdgeNGramTokenFilterV2, OdataTypeMicrosoftAzureSearchElisionTokenFilter, OdataTypeMicrosoftAzureSearchKeepTokenFilter, OdataTypeMicrosoftAzureSearchKeywordMarkerTokenFilter, OdataTypeMicrosoftAzureSearchLengthTokenFilter, OdataTypeMicrosoftAzureSearchLimitTokenFilter, OdataTypeMicrosoftAzureSearchNGramTokenFilter, OdataTypeMicrosoftAzureSearchNGramTokenFilterV2, OdataTypeMicrosoftAzureSearchPatternCaptureTokenFilter, OdataTypeMicrosoftAzureSearchPatternReplaceTokenFilter, OdataTypeMicrosoftAzureSearchPhoneticTokenFilter, OdataTypeMicrosoftAzureSearchShingleTokenFilter, OdataTypeMicrosoftAzureSearchSnowballTokenFilter, OdataTypeMicrosoftAzureSearchStemmerOverrideTokenFilter, OdataTypeMicrosoftAzureSearchStemmerTokenFilter, OdataTypeMicrosoftAzureSearchStopwordsTokenFilter, OdataTypeMicrosoftAzureSearchSynonymTokenFilter, OdataTypeMicrosoftAzureSearchTruncateTokenFilter, OdataTypeMicrosoftAzureSearchUniqueTokenFilter, OdataTypeMicrosoftAzureSearchWordDelimiterTokenFilter, OdataTypeTokenFilter}
}

// OdataTypeBasicTokenizer enumerates the values for odata type basic tokenizer.
type OdataTypeBasicTokenizer string

const (
	// OdataTypeMicrosoftAzureSearchClassicTokenizer ...
	OdataTypeMicrosoftAzureSearchClassicTokenizer OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.ClassicTokenizer"
	// OdataTypeMicrosoftAzureSearchEdgeNGramTokenizer ...
	OdataTypeMicrosoftAzureSearchEdgeNGramTokenizer OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.EdgeNGramTokenizer"
	// OdataTypeMicrosoftAzureSearchKeywordTokenizer ...
	OdataTypeMicrosoftAzureSearchKeywordTokenizer OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.KeywordTokenizer"
	// OdataTypeMicrosoftAzureSearchKeywordTokenizerV2 ...
	OdataTypeMicrosoftAzureSearchKeywordTokenizerV2 OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.KeywordTokenizerV2"
	// OdataTypeMicrosoftAzureSearchMicrosoftLanguageStemmingTokenizer ...
	OdataTypeMicrosoftAzureSearchMicrosoftLanguageStemmingTokenizer OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.MicrosoftLanguageStemmingTokenizer"
	// OdataTypeMicrosoftAzureSearchMicrosoftLanguageTokenizer ...
	OdataTypeMicrosoftAzureSearchMicrosoftLanguageTokenizer OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.MicrosoftLanguageTokenizer"
	// OdataTypeMicrosoftAzureSearchNGramTokenizer ...
	OdataTypeMicrosoftAzureSearchNGramTokenizer OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.NGramTokenizer"
	// OdataTypeMicrosoftAzureSearchPathHierarchyTokenizer ...
	OdataTypeMicrosoftAzureSearchPathHierarchyTokenizer OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.PathHierarchyTokenizer"
	// OdataTypeMicrosoftAzureSearchPathHierarchyTokenizerV2 ...
	OdataTypeMicrosoftAzureSearchPathHierarchyTokenizerV2 OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.PathHierarchyTokenizerV2"
	// OdataTypeMicrosoftAzureSearchPatternTokenizer ...
	OdataTypeMicrosoftAzureSearchPatternTokenizer OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.PatternTokenizer"
	// OdataTypeMicrosoftAzureSearchStandardTokenizer ...
	OdataTypeMicrosoftAzureSearchStandardTokenizer OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.StandardTokenizer"
	// OdataTypeMicrosoftAzureSearchStandardTokenizerV2 ...
	OdataTypeMicrosoftAzureSearchStandardTokenizerV2 OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.StandardTokenizerV2"
	// OdataTypeMicrosoftAzureSearchUaxURLEmailTokenizer ...
	OdataTypeMicrosoftAzureSearchUaxURLEmailTokenizer OdataTypeBasicTokenizer = "#Microsoft.Azure.Search.UaxUrlEmailTokenizer"
	// OdataTypeTokenizer ...
	OdataTypeTokenizer OdataTypeBasicTokenizer = "Tokenizer"
)

// PossibleOdataTypeBasicTokenizerValues returns an array of possible values for the OdataTypeBasicTokenizer const type.
func PossibleOdataTypeBasicTokenizerValues() []OdataTypeBasicTokenizer {
	return []OdataTypeBasicTokenizer{OdataTypeMicrosoftAzureSearchClassicTokenizer, OdataTypeMicrosoftAzureSearchEdgeNGramTokenizer, OdataTypeMicrosoftAzureSearchKeywordTokenizer, OdataTypeMicrosoftAzureSearchKeywordTokenizerV2, OdataTypeMicrosoftAzureSearchMicrosoftLanguageStemmingTokenizer, OdataTypeMicrosoftAzureSearchMicrosoftLanguageTokenizer, OdataTypeMicrosoftAzureSearchNGramTokenizer, OdataTypeMicrosoftAzureSearchPathHierarchyTokenizer, OdataTypeMicrosoftAzureSearchPathHierarchyTokenizerV2, OdataTypeMicrosoftAzureSearchPatternTokenizer, OdataTypeMicrosoftAzureSearchStandardTokenizer, OdataTypeMicrosoftAzureSearchStandardTokenizerV2, OdataTypeMicrosoftAzureSearchUaxURLEmailTokenizer, OdataTypeTokenizer}
}

// PhoneticEncoder enumerates the values for phonetic encoder.
type PhoneticEncoder string

const (
	// BeiderMorse ...
	BeiderMorse PhoneticEncoder = "beiderMorse"
	// Caverphone1 ...
	Caverphone1 PhoneticEncoder = "caverphone1"
	// Caverphone2 ...
	Caverphone2 PhoneticEncoder = "caverphone2"
	// Cologne ...
	Cologne PhoneticEncoder = "cologne"
	// DoubleMetaphone ...
	DoubleMetaphone PhoneticEncoder = "doubleMetaphone"
	// HaasePhonetik ...
	HaasePhonetik PhoneticEncoder = "haasePhonetik"
	// KoelnerPhonetik ...
	KoelnerPhonetik PhoneticEncoder = "koelnerPhonetik"
	// Metaphone ...
	Metaphone PhoneticEncoder = "metaphone"
	// Nysiis ...
	Nysiis PhoneticEncoder = "nysiis"
	// RefinedSoundex ...
	RefinedSoundex PhoneticEncoder = "refinedSoundex"
	// Soundex ...
	Soundex PhoneticEncoder = "soundex"
)

// PossiblePhoneticEncoderValues returns an array of possible values for the PhoneticEncoder const type.
func PossiblePhoneticEncoderValues() []PhoneticEncoder {
	return []PhoneticEncoder{BeiderMorse, Caverphone1, Caverphone2, Cologne, DoubleMetaphone, HaasePhonetik, KoelnerPhonetik, Metaphone, Nysiis, RefinedSoundex, Soundex}
}

// RegexFlags enumerates the values for regex flags.
type RegexFlags string

const (
	// CANONEQ ...
	CANONEQ RegexFlags = "CANON_EQ"
	// CASEINSENSITIVE ...
	CASEINSENSITIVE RegexFlags = "CASE_INSENSITIVE"
	// COMMENTS ...
	COMMENTS RegexFlags = "COMMENTS"
	// DOTALL ...
	DOTALL RegexFlags = "DOTALL"
	// LITERAL ...
	LITERAL RegexFlags = "LITERAL"
	// MULTILINE ...
	MULTILINE RegexFlags = "MULTILINE"
	// UNICODECASE ...
	UNICODECASE RegexFlags = "UNICODE_CASE"
	// UNIXLINES ...
	UNIXLINES RegexFlags = "UNIX_LINES"
)

// PossibleRegexFlagsValues returns an array of possible values for the RegexFlags const type.
func PossibleRegexFlagsValues() []RegexFlags {
	return []RegexFlags{CANONEQ, CASEINSENSITIVE, COMMENTS, DOTALL, LITERAL, MULTILINE, UNICODECASE, UNIXLINES}
}

// ScoringFunctionAggregation enumerates the values for scoring function aggregation.
type ScoringFunctionAggregation string

const (
	// Average ...
	Average ScoringFunctionAggregation = "average"
	// FirstMatching ...
	FirstMatching ScoringFunctionAggregation = "firstMatching"
	// Maximum ...
	Maximum ScoringFunctionAggregation = "maximum"
	// Minimum ...
	Minimum ScoringFunctionAggregation = "minimum"
	// Sum ...
	Sum ScoringFunctionAggregation = "sum"
)

// PossibleScoringFunctionAggregationValues returns an array of possible values for the ScoringFunctionAggregation const type.
func PossibleScoringFunctionAggregationValues() []ScoringFunctionAggregation {
	return []ScoringFunctionAggregation{Average, FirstMatching, Maximum, Minimum, Sum}
}

// ScoringFunctionInterpolation enumerates the values for scoring function interpolation.
type ScoringFunctionInterpolation string

const (
	// Constant ...
	Constant ScoringFunctionInterpolation = "constant"
	// Linear ...
	Linear ScoringFunctionInterpolation = "linear"
	// Logarithmic ...
	Logarithmic ScoringFunctionInterpolation = "logarithmic"
	// Quadratic ...
	Quadratic ScoringFunctionInterpolation = "quadratic"
)

// PossibleScoringFunctionInterpolationValues returns an array of possible values for the ScoringFunctionInterpolation const type.
func PossibleScoringFunctionInterpolationValues() []ScoringFunctionInterpolation {
	return []ScoringFunctionInterpolation{Constant, Linear, Logarithmic, Quadratic}
}

// SentimentSkillLanguage enumerates the values for sentiment skill language.
type SentimentSkillLanguage string

const (
	// SentimentSkillLanguageDa Danish
	SentimentSkillLanguageDa SentimentSkillLanguage = "da"
	// SentimentSkillLanguageDe German
	SentimentSkillLanguageDe SentimentSkillLanguage = "de"
	// SentimentSkillLanguageEl Greek
	SentimentSkillLanguageEl SentimentSkillLanguage = "el"
	// SentimentSkillLanguageEn English
	SentimentSkillLanguageEn SentimentSkillLanguage = "en"
	// SentimentSkillLanguageEs Spanish
	SentimentSkillLanguageEs SentimentSkillLanguage = "es"
	// SentimentSkillLanguageFi Finnish
	SentimentSkillLanguageFi SentimentSkillLanguage = "fi"
	// SentimentSkillLanguageFr French
	SentimentSkillLanguageFr SentimentSkillLanguage = "fr"
	// SentimentSkillLanguageIt Italian
	SentimentSkillLanguageIt SentimentSkillLanguage = "it"
	// SentimentSkillLanguageNl Dutch
	SentimentSkillLanguageNl SentimentSkillLanguage = "nl"
	// SentimentSkillLanguageNo Norwegian (Bokmaal)
	SentimentSkillLanguageNo SentimentSkillLanguage = "no"
	// SentimentSkillLanguagePl Polish
	SentimentSkillLanguagePl SentimentSkillLanguage = "pl"
	// SentimentSkillLanguagePtPT Portuguese (Portugal)
	SentimentSkillLanguagePtPT SentimentSkillLanguage = "pt-PT"
	// SentimentSkillLanguageRu Russian
	SentimentSkillLanguageRu SentimentSkillLanguage = "ru"
	// SentimentSkillLanguageSv Swedish
	SentimentSkillLanguageSv SentimentSkillLanguage = "sv"
	// SentimentSkillLanguageTr Turkish
	SentimentSkillLanguageTr SentimentSkillLanguage = "tr"
)

// PossibleSentimentSkillLanguageValues returns an array of possible values for the SentimentSkillLanguage const type.
func PossibleSentimentSkillLanguageValues() []SentimentSkillLanguage {
	return []SentimentSkillLanguage{SentimentSkillLanguageDa, SentimentSkillLanguageDe, SentimentSkillLanguageEl, SentimentSkillLanguageEn, SentimentSkillLanguageEs, SentimentSkillLanguageFi, SentimentSkillLanguageFr, SentimentSkillLanguageIt, SentimentSkillLanguageNl, SentimentSkillLanguageNo, SentimentSkillLanguagePl, SentimentSkillLanguagePtPT, SentimentSkillLanguageRu, SentimentSkillLanguageSv, SentimentSkillLanguageTr}
}

// SnowballTokenFilterLanguage enumerates the values for snowball token filter language.
type SnowballTokenFilterLanguage string

const (
	// SnowballTokenFilterLanguageArmenian ...
	SnowballTokenFilterLanguageArmenian SnowballTokenFilterLanguage = "armenian"
	// SnowballTokenFilterLanguageBasque ...
	SnowballTokenFilterLanguageBasque SnowballTokenFilterLanguage = "basque"
	// SnowballTokenFilterLanguageCatalan ...
	SnowballTokenFilterLanguageCatalan SnowballTokenFilterLanguage = "catalan"
	// SnowballTokenFilterLanguageDanish ...
	SnowballTokenFilterLanguageDanish SnowballTokenFilterLanguage = "danish"
	// SnowballTokenFilterLanguageDutch ...
	SnowballTokenFilterLanguageDutch SnowballTokenFilterLanguage = "dutch"
	// SnowballTokenFilterLanguageEnglish ...
	SnowballTokenFilterLanguageEnglish SnowballTokenFilterLanguage = "english"
	// SnowballTokenFilterLanguageFinnish ...
	SnowballTokenFilterLanguageFinnish SnowballTokenFilterLanguage = "finnish"
	// SnowballTokenFilterLanguageFrench ...
	SnowballTokenFilterLanguageFrench SnowballTokenFilterLanguage = "french"
	// SnowballTokenFilterLanguageGerman ...
	SnowballTokenFilterLanguageGerman SnowballTokenFilterLanguage = "german"
	// SnowballTokenFilterLanguageGerman2 ...
	SnowballTokenFilterLanguageGerman2 SnowballTokenFilterLanguage = "german2"
	// SnowballTokenFilterLanguageHungarian ...
	SnowballTokenFilterLanguageHungarian SnowballTokenFilterLanguage = "hungarian"
	// SnowballTokenFilterLanguageItalian ...
	SnowballTokenFilterLanguageItalian SnowballTokenFilterLanguage = "italian"
	// SnowballTokenFilterLanguageKp ...
	SnowballTokenFilterLanguageKp SnowballTokenFilterLanguage = "kp"
	// SnowballTokenFilterLanguageLovins ...
	SnowballTokenFilterLanguageLovins SnowballTokenFilterLanguage = "lovins"
	// SnowballTokenFilterLanguageNorwegian ...
	SnowballTokenFilterLanguageNorwegian SnowballTokenFilterLanguage = "norwegian"
	// SnowballTokenFilterLanguagePorter ...
	SnowballTokenFilterLanguagePorter SnowballTokenFilterLanguage = "porter"
	// SnowballTokenFilterLanguagePortuguese ...
	SnowballTokenFilterLanguagePortuguese SnowballTokenFilterLanguage = "portuguese"
	// SnowballTokenFilterLanguageRomanian ...
	SnowballTokenFilterLanguageRomanian SnowballTokenFilterLanguage = "romanian"
	// SnowballTokenFilterLanguageRussian ...
	SnowballTokenFilterLanguageRussian SnowballTokenFilterLanguage = "russian"
	// SnowballTokenFilterLanguageSpanish ...
	SnowballTokenFilterLanguageSpanish SnowballTokenFilterLanguage = "spanish"
	// SnowballTokenFilterLanguageSwedish ...
	SnowballTokenFilterLanguageSwedish SnowballTokenFilterLanguage = "swedish"
	// SnowballTokenFilterLanguageTurkish ...
	SnowballTokenFilterLanguageTurkish SnowballTokenFilterLanguage = "turkish"
)

// PossibleSnowballTokenFilterLanguageValues returns an array of possible values for the SnowballTokenFilterLanguage const type.
func PossibleSnowballTokenFilterLanguageValues() []SnowballTokenFilterLanguage {
	return []SnowballTokenFilterLanguage{SnowballTokenFilterLanguageArmenian, SnowballTokenFilterLanguageBasque, SnowballTokenFilterLanguageCatalan, SnowballTokenFilterLanguageDanish, SnowballTokenFilterLanguageDutch, SnowballTokenFilterLanguageEnglish, SnowballTokenFilterLanguageFinnish, SnowballTokenFilterLanguageFrench, SnowballTokenFilterLanguageGerman, SnowballTokenFilterLanguageGerman2, SnowballTokenFilterLanguageHungarian, SnowballTokenFilterLanguageItalian, SnowballTokenFilterLanguageKp, SnowballTokenFilterLanguageLovins, SnowballTokenFilterLanguageNorwegian, SnowballTokenFilterLanguagePorter, SnowballTokenFilterLanguagePortuguese, SnowballTokenFilterLanguageRomanian, SnowballTokenFilterLanguageRussian, SnowballTokenFilterLanguageSpanish, SnowballTokenFilterLanguageSwedish, SnowballTokenFilterLanguageTurkish}
}

// SplitSkillLanguage enumerates the values for split skill language.
type SplitSkillLanguage string

const (
	// SplitSkillLanguageDa Danish
	SplitSkillLanguageDa SplitSkillLanguage = "da"
	// SplitSkillLanguageDe German
	SplitSkillLanguageDe SplitSkillLanguage = "de"
	// SplitSkillLanguageEn English
	SplitSkillLanguageEn SplitSkillLanguage = "en"
	// SplitSkillLanguageEs Spanish
	SplitSkillLanguageEs SplitSkillLanguage = "es"
	// SplitSkillLanguageFi Finnish
	SplitSkillLanguageFi SplitSkillLanguage = "fi"
	// SplitSkillLanguageFr French
	SplitSkillLanguageFr SplitSkillLanguage = "fr"
	// SplitSkillLanguageIt Italian
	SplitSkillLanguageIt SplitSkillLanguage = "it"
	// SplitSkillLanguageKo Korean
	SplitSkillLanguageKo SplitSkillLanguage = "ko"
	// SplitSkillLanguagePt Portuguese
	SplitSkillLanguagePt SplitSkillLanguage = "pt"
)

// PossibleSplitSkillLanguageValues returns an array of possible values for the SplitSkillLanguage const type.
func PossibleSplitSkillLanguageValues() []SplitSkillLanguage {
	return []SplitSkillLanguage{SplitSkillLanguageDa, SplitSkillLanguageDe, SplitSkillLanguageEn, SplitSkillLanguageEs, SplitSkillLanguageFi, SplitSkillLanguageFr, SplitSkillLanguageIt, SplitSkillLanguageKo, SplitSkillLanguagePt}
}

// StemmerTokenFilterLanguage enumerates the values for stemmer token filter language.
type StemmerTokenFilterLanguage string

const (
	// StemmerTokenFilterLanguageArabic ...
	StemmerTokenFilterLanguageArabic StemmerTokenFilterLanguage = "arabic"
	// StemmerTokenFilterLanguageArmenian ...
	StemmerTokenFilterLanguageArmenian StemmerTokenFilterLanguage = "armenian"
	// StemmerTokenFilterLanguageBasque ...
	StemmerTokenFilterLanguageBasque StemmerTokenFilterLanguage = "basque"
	// StemmerTokenFilterLanguageBrazilian ...
	StemmerTokenFilterLanguageBrazilian StemmerTokenFilterLanguage = "brazilian"
	// StemmerTokenFilterLanguageBulgarian ...
	StemmerTokenFilterLanguageBulgarian StemmerTokenFilterLanguage = "bulgarian"
	// StemmerTokenFilterLanguageCatalan ...
	StemmerTokenFilterLanguageCatalan StemmerTokenFilterLanguage = "catalan"
	// StemmerTokenFilterLanguageCzech ...
	StemmerTokenFilterLanguageCzech StemmerTokenFilterLanguage = "czech"
	// StemmerTokenFilterLanguageDanish ...
	StemmerTokenFilterLanguageDanish StemmerTokenFilterLanguage = "danish"
	// StemmerTokenFilterLanguageDutch ...
	StemmerTokenFilterLanguageDutch StemmerTokenFilterLanguage = "dutch"
	// StemmerTokenFilterLanguageDutchKp ...
	StemmerTokenFilterLanguageDutchKp StemmerTokenFilterLanguage = "dutchKp"
	// StemmerTokenFilterLanguageEnglish ...
	StemmerTokenFilterLanguageEnglish StemmerTokenFilterLanguage = "english"
	// StemmerTokenFilterLanguageFinnish ...
	StemmerTokenFilterLanguageFinnish StemmerTokenFilterLanguage = "finnish"
	// StemmerTokenFilterLanguageFrench ...
	StemmerTokenFilterLanguageFrench StemmerTokenFilterLanguage = "french"
	// StemmerTokenFilterLanguageGalician ...
	StemmerTokenFilterLanguageGalician StemmerTokenFilterLanguage = "galician"
	// StemmerTokenFilterLanguageGerman ...
	StemmerTokenFilterLanguageGerman StemmerTokenFilterLanguage = "german"
	// StemmerTokenFilterLanguageGerman2 ...
	StemmerTokenFilterLanguageGerman2 StemmerTokenFilterLanguage = "german2"
	// StemmerTokenFilterLanguageGreek ...
	StemmerTokenFilterLanguageGreek StemmerTokenFilterLanguage = "greek"
	// StemmerTokenFilterLanguageHindi ...
	StemmerTokenFilterLanguageHindi StemmerTokenFilterLanguage = "hindi"
	// StemmerTokenFilterLanguageHungarian ...
	StemmerTokenFilterLanguageHungarian StemmerTokenFilterLanguage = "hungarian"
	// StemmerTokenFilterLanguageIndonesian ...
	StemmerTokenFilterLanguageIndonesian StemmerTokenFilterLanguage = "indonesian"
	// StemmerTokenFilterLanguageIrish ...
	StemmerTokenFilterLanguageIrish StemmerTokenFilterLanguage = "irish"
	// StemmerTokenFilterLanguageItalian ...
	StemmerTokenFilterLanguageItalian StemmerTokenFilterLanguage = "italian"
	// StemmerTokenFilterLanguageLatvian ...
	StemmerTokenFilterLanguageLatvian StemmerTokenFilterLanguage = "latvian"
	// StemmerTokenFilterLanguageLightEnglish ...
	StemmerTokenFilterLanguageLightEnglish StemmerTokenFilterLanguage = "lightEnglish"
	// StemmerTokenFilterLanguageLightFinnish ...
	StemmerTokenFilterLanguageLightFinnish StemmerTokenFilterLanguage = "lightFinnish"
	// StemmerTokenFilterLanguageLightFrench ...
	StemmerTokenFilterLanguageLightFrench StemmerTokenFilterLanguage = "lightFrench"
	// StemmerTokenFilterLanguageLightGerman ...
	StemmerTokenFilterLanguageLightGerman StemmerTokenFilterLanguage = "lightGerman"
	// StemmerTokenFilterLanguageLightHungarian ...
	StemmerTokenFilterLanguageLightHungarian StemmerTokenFilterLanguage = "lightHungarian"
	// StemmerTokenFilterLanguageLightItalian ...
	StemmerTokenFilterLanguageLightItalian StemmerTokenFilterLanguage = "lightItalian"
	// StemmerTokenFilterLanguageLightNorwegian ...
	StemmerTokenFilterLanguageLightNorwegian StemmerTokenFilterLanguage = "lightNorwegian"
	// StemmerTokenFilterLanguageLightNynorsk ...
	StemmerTokenFilterLanguageLightNynorsk StemmerTokenFilterLanguage = "lightNynorsk"
	// StemmerTokenFilterLanguageLightPortuguese ...
	StemmerTokenFilterLanguageLightPortuguese StemmerTokenFilterLanguage = "lightPortuguese"
	// StemmerTokenFilterLanguageLightRussian ...
	StemmerTokenFilterLanguageLightRussian StemmerTokenFilterLanguage = "lightRussian"
	// StemmerTokenFilterLanguageLightSpanish ...
	StemmerTokenFilterLanguageLightSpanish StemmerTokenFilterLanguage = "lightSpanish"
	// StemmerTokenFilterLanguageLightSwedish ...
	StemmerTokenFilterLanguageLightSwedish StemmerTokenFilterLanguage = "lightSwedish"
	// StemmerTokenFilterLanguageLovins ...
	StemmerTokenFilterLanguageLovins StemmerTokenFilterLanguage = "lovins"
	// StemmerTokenFilterLanguageMinimalEnglish ...
	StemmerTokenFilterLanguageMinimalEnglish StemmerTokenFilterLanguage = "minimalEnglish"
	// StemmerTokenFilterLanguageMinimalFrench ...
	StemmerTokenFilterLanguageMinimalFrench StemmerTokenFilterLanguage = "minimalFrench"
	// StemmerTokenFilterLanguageMinimalGalician ...
	StemmerTokenFilterLanguageMinimalGalician StemmerTokenFilterLanguage = "minimalGalician"
	// StemmerTokenFilterLanguageMinimalGerman ...
	StemmerTokenFilterLanguageMinimalGerman StemmerTokenFilterLanguage = "minimalGerman"
	// StemmerTokenFilterLanguageMinimalNorwegian ...
	StemmerTokenFilterLanguageMinimalNorwegian StemmerTokenFilterLanguage = "minimalNorwegian"
	// StemmerTokenFilterLanguageMinimalNynorsk ...
	StemmerTokenFilterLanguageMinimalNynorsk StemmerTokenFilterLanguage = "minimalNynorsk"
	// StemmerTokenFilterLanguageMinimalPortuguese ...
	StemmerTokenFilterLanguageMinimalPortuguese StemmerTokenFilterLanguage = "minimalPortuguese"
	// StemmerTokenFilterLanguageNorwegian ...
	StemmerTokenFilterLanguageNorwegian StemmerTokenFilterLanguage = "norwegian"
	// StemmerTokenFilterLanguagePorter2 ...
	StemmerTokenFilterLanguagePorter2 StemmerTokenFilterLanguage = "porter2"
	// StemmerTokenFilterLanguagePortuguese ...
	StemmerTokenFilterLanguagePortuguese StemmerTokenFilterLanguage = "portuguese"
	// StemmerTokenFilterLanguagePortugueseRslp ...
	StemmerTokenFilterLanguagePortugueseRslp StemmerTokenFilterLanguage = "portugueseRslp"
	// StemmerTokenFilterLanguagePossessiveEnglish ...
	StemmerTokenFilterLanguagePossessiveEnglish StemmerTokenFilterLanguage = "possessiveEnglish"
	// StemmerTokenFilterLanguageRomanian ...
	StemmerTokenFilterLanguageRomanian StemmerTokenFilterLanguage = "romanian"
	// StemmerTokenFilterLanguageRussian ...
	StemmerTokenFilterLanguageRussian StemmerTokenFilterLanguage = "russian"
	// StemmerTokenFilterLanguageSorani ...
	StemmerTokenFilterLanguageSorani StemmerTokenFilterLanguage = "sorani"
	// StemmerTokenFilterLanguageSpanish ...
	StemmerTokenFilterLanguageSpanish StemmerTokenFilterLanguage = "spanish"
	// StemmerTokenFilterLanguageSwedish ...
	StemmerTokenFilterLanguageSwedish StemmerTokenFilterLanguage = "swedish"
	// StemmerTokenFilterLanguageTurkish ...
	StemmerTokenFilterLanguageTurkish StemmerTokenFilterLanguage = "turkish"
)

// PossibleStemmerTokenFilterLanguageValues returns an array of possible values for the StemmerTokenFilterLanguage const type.
func PossibleStemmerTokenFilterLanguageValues() []StemmerTokenFilterLanguage {
	return []StemmerTokenFilterLanguage{StemmerTokenFilterLanguageArabic, StemmerTokenFilterLanguageArmenian, StemmerTokenFilterLanguageBasque, StemmerTokenFilterLanguageBrazilian, StemmerTokenFilterLanguageBulgarian, StemmerTokenFilterLanguageCatalan, StemmerTokenFilterLanguageCzech, StemmerTokenFilterLanguageDanish, StemmerTokenFilterLanguageDutch, StemmerTokenFilterLanguageDutchKp, StemmerTokenFilterLanguageEnglish, StemmerTokenFilterLanguageFinnish, StemmerTokenFilterLanguageFrench, StemmerTokenFilterLanguageGalician, StemmerTokenFilterLanguageGerman, StemmerTokenFilterLanguageGerman2, StemmerTokenFilterLanguageGreek, StemmerTokenFilterLanguageHindi, StemmerTokenFilterLanguageHungarian, StemmerTokenFilterLanguageIndonesian, StemmerTokenFilterLanguageIrish, StemmerTokenFilterLanguageItalian, StemmerTokenFilterLanguageLatvian, StemmerTokenFilterLanguageLightEnglish, StemmerTokenFilterLanguageLightFinnish, StemmerTokenFilterLanguageLightFrench, StemmerTokenFilterLanguageLightGerman, StemmerTokenFilterLanguageLightHungarian, StemmerTokenFilterLanguageLightItalian, StemmerTokenFilterLanguageLightNorwegian, StemmerTokenFilterLanguageLightNynorsk, StemmerTokenFilterLanguageLightPortuguese, StemmerTokenFilterLanguageLightRussian, StemmerTokenFilterLanguageLightSpanish, StemmerTokenFilterLanguageLightSwedish, StemmerTokenFilterLanguageLovins, StemmerTokenFilterLanguageMinimalEnglish, StemmerTokenFilterLanguageMinimalFrench, StemmerTokenFilterLanguageMinimalGalician, StemmerTokenFilterLanguageMinimalGerman, StemmerTokenFilterLanguageMinimalNorwegian, StemmerTokenFilterLanguageMinimalNynorsk, StemmerTokenFilterLanguageMinimalPortuguese, StemmerTokenFilterLanguageNorwegian, StemmerTokenFilterLanguagePorter2, StemmerTokenFilterLanguagePortuguese, StemmerTokenFilterLanguagePortugueseRslp, StemmerTokenFilterLanguagePossessiveEnglish, StemmerTokenFilterLanguageRomanian, StemmerTokenFilterLanguageRussian, StemmerTokenFilterLanguageSorani, StemmerTokenFilterLanguageSpanish, StemmerTokenFilterLanguageSwedish, StemmerTokenFilterLanguageTurkish}
}

// StopwordsList enumerates the values for stopwords list.
type StopwordsList string

const (
	// StopwordsListArabic ...
	StopwordsListArabic StopwordsList = "arabic"
	// StopwordsListArmenian ...
	StopwordsListArmenian StopwordsList = "armenian"
	// StopwordsListBasque ...
	StopwordsListBasque StopwordsList = "basque"
	// StopwordsListBrazilian ...
	StopwordsListBrazilian StopwordsList = "brazilian"
	// StopwordsListBulgarian ...
	StopwordsListBulgarian StopwordsList = "bulgarian"
	// StopwordsListCatalan ...
	StopwordsListCatalan StopwordsList = "catalan"
	// StopwordsListCzech ...
	StopwordsListCzech StopwordsList = "czech"
	// StopwordsListDanish ...
	StopwordsListDanish StopwordsList = "danish"
	// StopwordsListDutch ...
	StopwordsListDutch StopwordsList = "dutch"
	// StopwordsListEnglish ...
	StopwordsListEnglish StopwordsList = "english"
	// StopwordsListFinnish ...
	StopwordsListFinnish StopwordsList = "finnish"
	// StopwordsListFrench ...
	StopwordsListFrench StopwordsList = "french"
	// StopwordsListGalician ...
	StopwordsListGalician StopwordsList = "galician"
	// StopwordsListGerman ...
	StopwordsListGerman StopwordsList = "german"
	// StopwordsListGreek ...
	StopwordsListGreek StopwordsList = "greek"
	// StopwordsListHindi ...
	StopwordsListHindi StopwordsList = "hindi"
	// StopwordsListHungarian ...
	StopwordsListHungarian StopwordsList = "hungarian"
	// StopwordsListIndonesian ...
	StopwordsListIndonesian StopwordsList = "indonesian"
	// StopwordsListIrish ...
	StopwordsListIrish StopwordsList = "irish"
	// StopwordsListItalian ...
	StopwordsListItalian StopwordsList = "italian"
	// StopwordsListLatvian ...
	StopwordsListLatvian StopwordsList = "latvian"
	// StopwordsListNorwegian ...
	StopwordsListNorwegian StopwordsList = "norwegian"
	// StopwordsListPersian ...
	StopwordsListPersian StopwordsList = "persian"
	// StopwordsListPortuguese ...
	StopwordsListPortuguese StopwordsList = "portuguese"
	// StopwordsListRomanian ...
	StopwordsListRomanian StopwordsList = "romanian"
	// StopwordsListRussian ...
	StopwordsListRussian StopwordsList = "russian"
	// StopwordsListSorani ...
	StopwordsListSorani StopwordsList = "sorani"
	// StopwordsListSpanish ...
	StopwordsListSpanish StopwordsList = "spanish"
	// StopwordsListSwedish ...
	StopwordsListSwedish StopwordsList = "swedish"
	// StopwordsListThai ...
	StopwordsListThai StopwordsList = "thai"
	// StopwordsListTurkish ...
	StopwordsListTurkish StopwordsList = "turkish"
)

// PossibleStopwordsListValues returns an array of possible values for the StopwordsList const type.
func PossibleStopwordsListValues() []StopwordsList {
	return []StopwordsList{StopwordsListArabic, StopwordsListArmenian, StopwordsListBasque, StopwordsListBrazilian, StopwordsListBulgarian, StopwordsListCatalan, StopwordsListCzech, StopwordsListDanish, StopwordsListDutch, StopwordsListEnglish, StopwordsListFinnish, StopwordsListFrench, StopwordsListGalician, StopwordsListGerman, StopwordsListGreek, StopwordsListHindi, StopwordsListHungarian, StopwordsListIndonesian, StopwordsListIrish, StopwordsListItalian, StopwordsListLatvian, StopwordsListNorwegian, StopwordsListPersian, StopwordsListPortuguese, StopwordsListRomanian, StopwordsListRussian, StopwordsListSorani, StopwordsListSpanish, StopwordsListSwedish, StopwordsListThai, StopwordsListTurkish}
}

// TextExtractionAlgorithm enumerates the values for text extraction algorithm.
type TextExtractionAlgorithm string

const (
	// Handwritten ...
	Handwritten TextExtractionAlgorithm = "handwritten"
	// Printed ...
	Printed TextExtractionAlgorithm = "printed"
)

// PossibleTextExtractionAlgorithmValues returns an array of possible values for the TextExtractionAlgorithm const type.
func PossibleTextExtractionAlgorithmValues() []TextExtractionAlgorithm {
	return []TextExtractionAlgorithm{Handwritten, Printed}
}

// TextSplitMode enumerates the values for text split mode.
type TextSplitMode string

const (
	// Pages ...
	Pages TextSplitMode = "pages"
	// Sentences ...
	Sentences TextSplitMode = "sentences"
)

// PossibleTextSplitModeValues returns an array of possible values for the TextSplitMode const type.
func PossibleTextSplitModeValues() []TextSplitMode {
	return []TextSplitMode{Pages, Sentences}
}

// TextTranslationSkillLanguage enumerates the values for text translation skill language.
type TextTranslationSkillLanguage string

const (
	// TextTranslationSkillLanguageAf Afrikaans
	TextTranslationSkillLanguageAf TextTranslationSkillLanguage = "af"
	// TextTranslationSkillLanguageAr Arabic
	TextTranslationSkillLanguageAr TextTranslationSkillLanguage = "ar"
	// TextTranslationSkillLanguageBg Bulgarian
	TextTranslationSkillLanguageBg TextTranslationSkillLanguage = "bg"
	// TextTranslationSkillLanguageBn Bangla
	TextTranslationSkillLanguageBn TextTranslationSkillLanguage = "bn"
	// TextTranslationSkillLanguageBs Bosnian (Latin)
	TextTranslationSkillLanguageBs TextTranslationSkillLanguage = "bs"
	// TextTranslationSkillLanguageCa Catalan
	TextTranslationSkillLanguageCa TextTranslationSkillLanguage = "ca"
	// TextTranslationSkillLanguageCs Czech
	TextTranslationSkillLanguageCs TextTranslationSkillLanguage = "cs"
	// TextTranslationSkillLanguageCy Welsh
	TextTranslationSkillLanguageCy TextTranslationSkillLanguage = "cy"
	// TextTranslationSkillLanguageDa Danish
	TextTranslationSkillLanguageDa TextTranslationSkillLanguage = "da"
	// TextTranslationSkillLanguageDe German
	TextTranslationSkillLanguageDe TextTranslationSkillLanguage = "de"
	// TextTranslationSkillLanguageEl Greek
	TextTranslationSkillLanguageEl TextTranslationSkillLanguage = "el"
	// TextTranslationSkillLanguageEn English
	TextTranslationSkillLanguageEn TextTranslationSkillLanguage = "en"
	// TextTranslationSkillLanguageEs Spanish
	TextTranslationSkillLanguageEs TextTranslationSkillLanguage = "es"
	// TextTranslationSkillLanguageEt Estonian
	TextTranslationSkillLanguageEt TextTranslationSkillLanguage = "et"
	// TextTranslationSkillLanguageFa Persian
	TextTranslationSkillLanguageFa TextTranslationSkillLanguage = "fa"
	// TextTranslationSkillLanguageFi Finnish
	TextTranslationSkillLanguageFi TextTranslationSkillLanguage = "fi"
	// TextTranslationSkillLanguageFil Filipino
	TextTranslationSkillLanguageFil TextTranslationSkillLanguage = "fil"
	// TextTranslationSkillLanguageFj Fijian
	TextTranslationSkillLanguageFj TextTranslationSkillLanguage = "fj"
	// TextTranslationSkillLanguageFr French
	TextTranslationSkillLanguageFr TextTranslationSkillLanguage = "fr"
	// TextTranslationSkillLanguageHe Hebrew
	TextTranslationSkillLanguageHe TextTranslationSkillLanguage = "he"
	// TextTranslationSkillLanguageHi Hindi
	TextTranslationSkillLanguageHi TextTranslationSkillLanguage = "hi"
	// TextTranslationSkillLanguageHr Croatian
	TextTranslationSkillLanguageHr TextTranslationSkillLanguage = "hr"
	// TextTranslationSkillLanguageHt Haitian Creole
	TextTranslationSkillLanguageHt TextTranslationSkillLanguage = "ht"
	// TextTranslationSkillLanguageHu Hungarian
	TextTranslationSkillLanguageHu TextTranslationSkillLanguage = "hu"
	// TextTranslationSkillLanguageID Indonesian
	TextTranslationSkillLanguageID TextTranslationSkillLanguage = "id"
	// TextTranslationSkillLanguageIs Icelandic
	TextTranslationSkillLanguageIs TextTranslationSkillLanguage = "is"
	// TextTranslationSkillLanguageIt Italian
	TextTranslationSkillLanguageIt TextTranslationSkillLanguage = "it"
	// TextTranslationSkillLanguageJa Japanese
	TextTranslationSkillLanguageJa TextTranslationSkillLanguage = "ja"
	// TextTranslationSkillLanguageKo Korean
	TextTranslationSkillLanguageKo TextTranslationSkillLanguage = "ko"
	// TextTranslationSkillLanguageLt Lithuanian
	TextTranslationSkillLanguageLt TextTranslationSkillLanguage = "lt"
	// TextTranslationSkillLanguageLv Latvian
	TextTranslationSkillLanguageLv TextTranslationSkillLanguage = "lv"
	// TextTranslationSkillLanguageMg Malagasy
	TextTranslationSkillLanguageMg TextTranslationSkillLanguage = "mg"
	// TextTranslationSkillLanguageMs Malay
	TextTranslationSkillLanguageMs TextTranslationSkillLanguage = "ms"
	// TextTranslationSkillLanguageMt Maltese
	TextTranslationSkillLanguageMt TextTranslationSkillLanguage = "mt"
	// TextTranslationSkillLanguageMww Hmong Daw
	TextTranslationSkillLanguageMww TextTranslationSkillLanguage = "mww"
	// TextTranslationSkillLanguageNb Norwegian
	TextTranslationSkillLanguageNb TextTranslationSkillLanguage = "nb"
	// TextTranslationSkillLanguageNl Dutch
	TextTranslationSkillLanguageNl TextTranslationSkillLanguage = "nl"
	// TextTranslationSkillLanguageOtq Queretaro Otomi
	TextTranslationSkillLanguageOtq TextTranslationSkillLanguage = "otq"
	// TextTranslationSkillLanguagePl Polish
	TextTranslationSkillLanguagePl TextTranslationSkillLanguage = "pl"
	// TextTranslationSkillLanguagePt Portuguese
	TextTranslationSkillLanguagePt TextTranslationSkillLanguage = "pt"
	// TextTranslationSkillLanguageRo Romanian
	TextTranslationSkillLanguageRo TextTranslationSkillLanguage = "ro"
	// TextTranslationSkillLanguageRu Russian
	TextTranslationSkillLanguageRu TextTranslationSkillLanguage = "ru"
	// TextTranslationSkillLanguageSk Slovak
	TextTranslationSkillLanguageSk TextTranslationSkillLanguage = "sk"
	// TextTranslationSkillLanguageSl Slovenian
	TextTranslationSkillLanguageSl TextTranslationSkillLanguage = "sl"
	// TextTranslationSkillLanguageSm Samoan
	TextTranslationSkillLanguageSm TextTranslationSkillLanguage = "sm"
	// TextTranslationSkillLanguageSrCyrl Serbian (Cyrillic)
	TextTranslationSkillLanguageSrCyrl TextTranslationSkillLanguage = "sr-Cyrl"
	// TextTranslationSkillLanguageSrLatn Serbian (Latin)
	TextTranslationSkillLanguageSrLatn TextTranslationSkillLanguage = "sr-Latn"
	// TextTranslationSkillLanguageSv Swedish
	TextTranslationSkillLanguageSv TextTranslationSkillLanguage = "sv"
	// TextTranslationSkillLanguageSw Kiswahili
	TextTranslationSkillLanguageSw TextTranslationSkillLanguage = "sw"
	// TextTranslationSkillLanguageTa Tamil
	TextTranslationSkillLanguageTa TextTranslationSkillLanguage = "ta"
	// TextTranslationSkillLanguageTe Telugu
	TextTranslationSkillLanguageTe TextTranslationSkillLanguage = "te"
	// TextTranslationSkillLanguageTh Thai
	TextTranslationSkillLanguageTh TextTranslationSkillLanguage = "th"
	// TextTranslationSkillLanguageTlh Klingon
	TextTranslationSkillLanguageTlh TextTranslationSkillLanguage = "tlh"
	// TextTranslationSkillLanguageTo Tongan
	TextTranslationSkillLanguageTo TextTranslationSkillLanguage = "to"
	// TextTranslationSkillLanguageTr Turkish
	TextTranslationSkillLanguageTr TextTranslationSkillLanguage = "tr"
	// TextTranslationSkillLanguageTy Tahitian
	TextTranslationSkillLanguageTy TextTranslationSkillLanguage = "ty"
	// TextTranslationSkillLanguageUk Ukrainian
	TextTranslationSkillLanguageUk TextTranslationSkillLanguage = "uk"
	// TextTranslationSkillLanguageUr Urdu
	TextTranslationSkillLanguageUr TextTranslationSkillLanguage = "ur"
	// TextTranslationSkillLanguageVi Vietnamese
	TextTranslationSkillLanguageVi TextTranslationSkillLanguage = "vi"
	// TextTranslationSkillLanguageYua Yucatec Maya
	TextTranslationSkillLanguageYua TextTranslationSkillLanguage = "yua"
	// TextTranslationSkillLanguageYue Cantonese (Traditional)
	TextTranslationSkillLanguageYue TextTranslationSkillLanguage = "yue"
	// TextTranslationSkillLanguageZhHans Chinese Simplified
	TextTranslationSkillLanguageZhHans TextTranslationSkillLanguage = "zh-Hans"
	// TextTranslationSkillLanguageZhHant Chinese Traditional
	TextTranslationSkillLanguageZhHant TextTranslationSkillLanguage = "zh-Hant"
)

// PossibleTextTranslationSkillLanguageValues returns an array of possible values for the TextTranslationSkillLanguage const type.
func PossibleTextTranslationSkillLanguageValues() []TextTranslationSkillLanguage {
	return []TextTranslationSkillLanguage{TextTranslationSkillLanguageAf, TextTranslationSkillLanguageAr, TextTranslationSkillLanguageBg, TextTranslationSkillLanguageBn, TextTranslationSkillLanguageBs, TextTranslationSkillLanguageCa, TextTranslationSkillLanguageCs, TextTranslationSkillLanguageCy, TextTranslationSkillLanguageDa, TextTranslationSkillLanguageDe, TextTranslationSkillLanguageEl, TextTranslationSkillLanguageEn, TextTranslationSkillLanguageEs, TextTranslationSkillLanguageEt, TextTranslationSkillLanguageFa, TextTranslationSkillLanguageFi, TextTranslationSkillLanguageFil, TextTranslationSkillLanguageFj, TextTranslationSkillLanguageFr, TextTranslationSkillLanguageHe, TextTranslationSkillLanguageHi, TextTranslationSkillLanguageHr, TextTranslationSkillLanguageHt, TextTranslationSkillLanguageHu, TextTranslationSkillLanguageID, TextTranslationSkillLanguageIs, TextTranslationSkillLanguageIt, TextTranslationSkillLanguageJa, TextTranslationSkillLanguageKo, TextTranslationSkillLanguageLt, TextTranslationSkillLanguageLv, TextTranslationSkillLanguageMg, TextTranslationSkillLanguageMs, TextTranslationSkillLanguageMt, TextTranslationSkillLanguageMww, TextTranslationSkillLanguageNb, TextTranslationSkillLanguageNl, TextTranslationSkillLanguageOtq, TextTranslationSkillLanguagePl, TextTranslationSkillLanguagePt, TextTranslationSkillLanguageRo, TextTranslationSkillLanguageRu, TextTranslationSkillLanguageSk, TextTranslationSkillLanguageSl, TextTranslationSkillLanguageSm, TextTranslationSkillLanguageSrCyrl, TextTranslationSkillLanguageSrLatn, TextTranslationSkillLanguageSv, TextTranslationSkillLanguageSw, TextTranslationSkillLanguageTa, TextTranslationSkillLanguageTe, TextTranslationSkillLanguageTh, TextTranslationSkillLanguageTlh, TextTranslationSkillLanguageTo, TextTranslationSkillLanguageTr, TextTranslationSkillLanguageTy, TextTranslationSkillLanguageUk, TextTranslationSkillLanguageUr, TextTranslationSkillLanguageVi, TextTranslationSkillLanguageYua, TextTranslationSkillLanguageYue, TextTranslationSkillLanguageZhHans, TextTranslationSkillLanguageZhHant}
}

// TokenCharacterKind enumerates the values for token character kind.
type TokenCharacterKind string

const (
	// TokenCharacterKindDigit ...
	TokenCharacterKindDigit TokenCharacterKind = "digit"
	// TokenCharacterKindLetter ...
	TokenCharacterKindLetter TokenCharacterKind = "letter"
	// TokenCharacterKindPunctuation ...
	TokenCharacterKindPunctuation TokenCharacterKind = "punctuation"
	// TokenCharacterKindSymbol ...
	TokenCharacterKindSymbol TokenCharacterKind = "symbol"
	// TokenCharacterKindWhitespace ...
	TokenCharacterKindWhitespace TokenCharacterKind = "whitespace"
)

// PossibleTokenCharacterKindValues returns an array of possible values for the TokenCharacterKind const type.
func PossibleTokenCharacterKindValues() []TokenCharacterKind {
	return []TokenCharacterKind{TokenCharacterKindDigit, TokenCharacterKindLetter, TokenCharacterKindPunctuation, TokenCharacterKindSymbol, TokenCharacterKindWhitespace}
}

// TokenFilterName enumerates the values for token filter name.
type TokenFilterName string

const (
	// Apostrophe Strips all characters after an apostrophe (including the apostrophe itself). See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/tr/ApostropheFilter.html
	Apostrophe TokenFilterName = "apostrophe"
	// ArabicNormalization A token filter that applies the Arabic normalizer to normalize the orthography. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.html
	ArabicNormalization TokenFilterName = "arabic_normalization"
	// ASCIIFolding Converts alphabetic, numeric, and symbolic Unicode characters which are not in the first
	// 127 ASCII characters (the "Basic Latin" Unicode block) into their ASCII equivalents, if such equivalents
	// exist. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html
	ASCIIFolding TokenFilterName = "asciifolding"
	// CjkBigram Forms bigrams of CJK terms that are generated from StandardTokenizer. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/cjk/CJKBigramFilter.html
	CjkBigram TokenFilterName = "cjk_bigram"
	// CjkWidth Normalizes CJK width differences. Folds fullwidth ASCII variants into the equivalent basic
	// Latin, and half-width Katakana variants into the equivalent Kana. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/cjk/CJKWidthFilter.html
	CjkWidth TokenFilterName = "cjk_width"
	// Classic Removes English possessives, and dots from acronyms. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/ClassicFilter.html
	Classic TokenFilterName = "classic"
	// CommonGram Construct bigrams for frequently occurring terms while indexing. Single terms are still
	// indexed too, with bigrams overlaid. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/commongrams/CommonGramsFilter.html
	CommonGram TokenFilterName = "common_grams"
	// EdgeNGram Generates n-grams of the given size(s) starting from the front or the back of an input token.
	// See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.html
	EdgeNGram TokenFilterName = "edgeNGram_v2"
	// Elision Removes elisions. For example, "l'avion" (the plane) will be converted to "avion" (plane). See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/util/ElisionFilter.html
	Elision TokenFilterName = "elision"
	// GermanNormalization Normalizes German characters according to the heuristics of the German2 snowball
	// algorithm. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/de/GermanNormalizationFilter.html
	GermanNormalization TokenFilterName = "german_normalization"
	// HindiNormalization Normalizes text in Hindi to remove some differences in spelling variations. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/hi/HindiNormalizationFilter.html
	HindiNormalization TokenFilterName = "hindi_normalization"
	// IndicNormalization Normalizes the Unicode representation of text in Indian languages. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/in/IndicNormalizationFilter.html
	IndicNormalization TokenFilterName = "indic_normalization"
	// KeywordRepeat Emits each incoming token twice, once as keyword and once as non-keyword. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter.html
	KeywordRepeat TokenFilterName = "keyword_repeat"
	// KStem A high-performance kstem filter for English. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/en/KStemFilter.html
	KStem TokenFilterName = "kstem"
	// Length Removes words that are too long or too short. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/LengthFilter.html
	Length TokenFilterName = "length"
	// Limit Limits the number of tokens while indexing. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.html
	Limit TokenFilterName = "limit"
	// Lowercase Normalizes token text to lower case. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LowerCaseFilter.htm
	Lowercase TokenFilterName = "lowercase"
	// NGram Generates n-grams of the given size(s). See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/NGramTokenFilter.html
	NGram TokenFilterName = "nGram_v2"
	// PersianNormalization Applies normalization for Persian. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/fa/PersianNormalizationFilter.html
	PersianNormalization TokenFilterName = "persian_normalization"
	// Phonetic Create tokens for phonetic matches. See
	// https://lucene.apache.org/core/4_10_3/analyzers-phonetic/org/apache/lucene/analysis/phonetic/package-tree.html
	Phonetic TokenFilterName = "phonetic"
	// PorterStem Uses the Porter stemming algorithm to transform the token stream. See
	// http://tartarus.org/~martin/PorterStemmer
	PorterStem TokenFilterName = "porter_stem"
	// Reverse Reverses the token string. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/reverse/ReverseStringFilter.html
	Reverse TokenFilterName = "reverse"
	// ScandinavianFoldingNormalization Folds Scandinavian characters åÅäæÄÆ-&gt;a and öÖøØ-&gt;o. It also
	// discriminates against use of double vowels aa, ae, ao, oe and oo, leaving just the first one. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.html
	ScandinavianFoldingNormalization TokenFilterName = "scandinavian_folding"
	// ScandinavianNormalization Normalizes use of the interchangeable Scandinavian characters. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.html
	ScandinavianNormalization TokenFilterName = "scandinavian_normalization"
	// Shingle Creates combinations of tokens as a single token. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/shingle/ShingleFilter.html
	Shingle TokenFilterName = "shingle"
	// Snowball A filter that stems words using a Snowball-generated stemmer. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/snowball/SnowballFilter.html
	Snowball TokenFilterName = "snowball"
	// SoraniNormalization Normalizes the Unicode representation of Sorani text. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.html
	SoraniNormalization TokenFilterName = "sorani_normalization"
	// Stemmer Language specific stemming filter. See
	// https://docs.microsoft.com/rest/api/searchservice/Custom-analyzers-in-Azure-Search#TokenFilters
	Stemmer TokenFilterName = "stemmer"
	// Stopwords Removes stop words from a token stream. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/StopFilter.html
	Stopwords TokenFilterName = "stopwords"
	// Trim Trims leading and trailing whitespace from tokens. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/TrimFilter.html
	Trim TokenFilterName = "trim"
	// Truncate Truncates the terms to a specific length. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter.html
	Truncate TokenFilterName = "truncate"
	// Unique Filters out tokens with same text as the previous token. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.html
	Unique TokenFilterName = "unique"
	// Uppercase Normalizes token text to upper case. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/UpperCaseFilter.html
	Uppercase TokenFilterName = "uppercase"
	// WordDelimiter Splits words into subwords and performs optional transformations on subword groups.
	WordDelimiter TokenFilterName = "word_delimiter"
)

// PossibleTokenFilterNameValues returns an array of possible values for the TokenFilterName const type.
func PossibleTokenFilterNameValues() []TokenFilterName {
	return []TokenFilterName{Apostrophe, ArabicNormalization, ASCIIFolding, CjkBigram, CjkWidth, Classic, CommonGram, EdgeNGram, Elision, GermanNormalization, HindiNormalization, IndicNormalization, KeywordRepeat, KStem, Length, Limit, Lowercase, NGram, PersianNormalization, Phonetic, PorterStem, Reverse, ScandinavianFoldingNormalization, ScandinavianNormalization, Shingle, Snowball, SoraniNormalization, Stemmer, Stopwords, Trim, Truncate, Unique, Uppercase, WordDelimiter}
}

// TokenizerName enumerates the values for tokenizer name.
type TokenizerName string

const (
	// TokenizerNameClassic Grammar-based tokenizer that is suitable for processing most European-language
	// documents. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/ClassicTokenizer.html
	TokenizerNameClassic TokenizerName = "classic"
	// TokenizerNameEdgeNGram Tokenizes the input from an edge into n-grams of the given size(s). See
	// https://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.html
	TokenizerNameEdgeNGram TokenizerName = "edgeNGram"
	// TokenizerNameKeyword Emits the entire input as a single token. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/KeywordTokenizer.html
	TokenizerNameKeyword TokenizerName = "keyword_v2"
	// TokenizerNameLetter Divides text at non-letters. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LetterTokenizer.html
	TokenizerNameLetter TokenizerName = "letter"
	// TokenizerNameLowercase Divides text at non-letters and converts them to lower case. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LowerCaseTokenizer.html
	TokenizerNameLowercase TokenizerName = "lowercase"
	// TokenizerNameMicrosoftLanguageStemmingTokenizer Divides text using language-specific rules and reduces
	// words to their base forms.
	TokenizerNameMicrosoftLanguageStemmingTokenizer TokenizerName = "microsoft_language_stemming_tokenizer"
	// TokenizerNameMicrosoftLanguageTokenizer Divides text using language-specific rules.
	TokenizerNameMicrosoftLanguageTokenizer TokenizerName = "microsoft_language_tokenizer"
	// TokenizerNameNGram Tokenizes the input into n-grams of the given size(s). See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/NGramTokenizer.html
	TokenizerNameNGram TokenizerName = "nGram"
	// TokenizerNamePathHierarchy Tokenizer for path-like hierarchies. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/path/PathHierarchyTokenizer.html
	TokenizerNamePathHierarchy TokenizerName = "path_hierarchy_v2"
	// TokenizerNamePattern Tokenizer that uses regex pattern matching to construct distinct tokens. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/pattern/PatternTokenizer.html
	TokenizerNamePattern TokenizerName = "pattern"
	// TokenizerNameStandard Standard Lucene analyzer; Composed of the standard tokenizer, lowercase filter and
	// stop filter. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/StandardTokenizer.html
	TokenizerNameStandard TokenizerName = "standard_v2"
	// TokenizerNameUaxURLEmail Tokenizes urls and emails as one token. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.html
	TokenizerNameUaxURLEmail TokenizerName = "uax_url_email"
	// TokenizerNameWhitespace Divides text at whitespace. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/WhitespaceTokenizer.html
	TokenizerNameWhitespace TokenizerName = "whitespace"
)

// PossibleTokenizerNameValues returns an array of possible values for the TokenizerName const type.
func PossibleTokenizerNameValues() []TokenizerName {
	return []TokenizerName{TokenizerNameClassic, TokenizerNameEdgeNGram, TokenizerNameKeyword, TokenizerNameLetter, TokenizerNameLowercase, TokenizerNameMicrosoftLanguageStemmingTokenizer, TokenizerNameMicrosoftLanguageTokenizer, TokenizerNameNGram, TokenizerNamePathHierarchy, TokenizerNamePattern, TokenizerNameStandard, TokenizerNameUaxURLEmail, TokenizerNameWhitespace}
}

// Type enumerates the values for type.
type Type string

const (
	// TypeDistance ...
	TypeDistance Type = "distance"
	// TypeFreshness ...
	TypeFreshness Type = "freshness"
	// TypeMagnitude ...
	TypeMagnitude Type = "magnitude"
	// TypeScoringFunction ...
	TypeScoringFunction Type = "ScoringFunction"
	// TypeTag ...
	TypeTag Type = "tag"
)

// PossibleTypeValues returns an array of possible values for the Type const type.
func PossibleTypeValues() []Type {
	return []Type{TypeDistance, TypeFreshness, TypeMagnitude, TypeScoringFunction, TypeTag}
}

// VisualFeature enumerates the values for visual feature.
type VisualFeature string

const (
	// Adult ...
	Adult VisualFeature = "adult"
	// Brands ...
	Brands VisualFeature = "brands"
	// Categories ...
	Categories VisualFeature = "categories"
	// Color ...
	Color VisualFeature = "color"
	// Description ...
	Description VisualFeature = "description"
	// Faces ...
	Faces VisualFeature = "faces"
	// ImageType ...
	ImageType VisualFeature = "imageType"
	// Objects ...
	Objects VisualFeature = "objects"
	// Tags ...
	Tags VisualFeature = "tags"
)

// PossibleVisualFeatureValues returns an array of possible values for the VisualFeature const type.
func PossibleVisualFeatureValues() []VisualFeature {
	return []VisualFeature{Adult, Brands, Categories, Color, Description, Faces, ImageType, Objects, Tags}
}
